// Code generated by protoc-gen-go. DO NOT EDIT.
// source: matrix_io/malos/v1/io.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EnumMatrixDeviceType int32

const (
	// Undetected device.
	EnumMatrixDeviceType_UNDETECTED EnumMatrixDeviceType = 0
	// Detected MATRIX Creator.
	EnumMatrixDeviceType_CREATOR EnumMatrixDeviceType = 1
	// Detected MATRIX Creator.
	EnumMatrixDeviceType_VOICE EnumMatrixDeviceType = 2
)

var EnumMatrixDeviceType_name = map[int32]string{
	0: "UNDETECTED",
	1: "CREATOR",
	2: "VOICE",
}

var EnumMatrixDeviceType_value = map[string]int32{
	"UNDETECTED": 0,
	"CREATOR":    1,
	"VOICE":      2,
}

func (x EnumMatrixDeviceType) String() string {
	return proto.EnumName(EnumMatrixDeviceType_name, int32(x))
}

func (EnumMatrixDeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{0}
}

// GPIO mode input/output
type GpioParams_EnumMode int32

const (
	GpioParams_INPUT  GpioParams_EnumMode = 0
	GpioParams_OUTPUT GpioParams_EnumMode = 1
)

var GpioParams_EnumMode_name = map[int32]string{
	0: "INPUT",
	1: "OUTPUT",
}

var GpioParams_EnumMode_value = map[string]int32{
	"INPUT":  0,
	"OUTPUT": 1,
}

func (x GpioParams_EnumMode) String() string {
	return proto.EnumName(GpioParams_EnumMode_name, int32(x))
}

func (GpioParams_EnumMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{3, 0}
}

// Mic channel
type WakeWordParams_MicChannel int32

const (
	WakeWordParams_channel0 WakeWordParams_MicChannel = 0
	WakeWordParams_channel1 WakeWordParams_MicChannel = 1
	WakeWordParams_channel2 WakeWordParams_MicChannel = 2
	WakeWordParams_channel3 WakeWordParams_MicChannel = 3
	WakeWordParams_channel4 WakeWordParams_MicChannel = 4
	WakeWordParams_channel5 WakeWordParams_MicChannel = 5
	WakeWordParams_channel6 WakeWordParams_MicChannel = 6
	WakeWordParams_channel7 WakeWordParams_MicChannel = 7
	WakeWordParams_channel8 WakeWordParams_MicChannel = 8
)

var WakeWordParams_MicChannel_name = map[int32]string{
	0: "channel0",
	1: "channel1",
	2: "channel2",
	3: "channel3",
	4: "channel4",
	5: "channel5",
	6: "channel6",
	7: "channel7",
	8: "channel8",
}

var WakeWordParams_MicChannel_value = map[string]int32{
	"channel0": 0,
	"channel1": 1,
	"channel2": 2,
	"channel3": 3,
	"channel4": 4,
	"channel5": 5,
	"channel6": 6,
	"channel7": 7,
	"channel8": 8,
}

func (x WakeWordParams_MicChannel) String() string {
	return proto.EnumName(WakeWordParams_MicChannel_name, int32(x))
}

func (WakeWordParams_MicChannel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{5, 0}
}

// Value for a led. Values range from 0 to 255.
type LedValue struct {
	Red                  uint32   `protobuf:"varint,1,opt,name=red,proto3" json:"red,omitempty"`
	Green                uint32   `protobuf:"varint,2,opt,name=green,proto3" json:"green,omitempty"`
	Blue                 uint32   `protobuf:"varint,3,opt,name=blue,proto3" json:"blue,omitempty"`
	White                uint32   `protobuf:"varint,4,opt,name=white,proto3" json:"white,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LedValue) Reset()         { *m = LedValue{} }
func (m *LedValue) String() string { return proto.CompactTextString(m) }
func (*LedValue) ProtoMessage()    {}
func (*LedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{0}
}

func (m *LedValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedValue.Unmarshal(m, b)
}
func (m *LedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedValue.Marshal(b, m, deterministic)
}
func (m *LedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedValue.Merge(m, src)
}
func (m *LedValue) XXX_Size() int {
	return xxx_messageInfo_LedValue.Size(m)
}
func (m *LedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LedValue.DiscardUnknown(m)
}

var xxx_messageInfo_LedValue proto.InternalMessageInfo

func (m *LedValue) GetRed() uint32 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *LedValue) GetGreen() uint32 {
	if m != nil {
		return m.Green
	}
	return 0
}

func (m *LedValue) GetBlue() uint32 {
	if m != nil {
		return m.Blue
	}
	return 0
}

func (m *LedValue) GetWhite() uint32 {
	if m != nil {
		return m.White
	}
	return 0
}

// The led array.
type EverloopImage struct {
	Led []*LedValue `protobuf:"bytes,1,rep,name=led,proto3" json:"led,omitempty"`
	// Number of leds in the Everloop
	EverloopLength       int32    `protobuf:"varint,2,opt,name=everloop_length,json=everloopLength,proto3" json:"everloop_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EverloopImage) Reset()         { *m = EverloopImage{} }
func (m *EverloopImage) String() string { return proto.CompactTextString(m) }
func (*EverloopImage) ProtoMessage()    {}
func (*EverloopImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{1}
}

func (m *EverloopImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EverloopImage.Unmarshal(m, b)
}
func (m *EverloopImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EverloopImage.Marshal(b, m, deterministic)
}
func (m *EverloopImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EverloopImage.Merge(m, src)
}
func (m *EverloopImage) XXX_Size() int {
	return xxx_messageInfo_EverloopImage.Size(m)
}
func (m *EverloopImage) XXX_DiscardUnknown() {
	xxx_messageInfo_EverloopImage.DiscardUnknown(m)
}

var xxx_messageInfo_EverloopImage proto.InternalMessageInfo

func (m *EverloopImage) GetLed() []*LedValue {
	if m != nil {
		return m.Led
	}
	return nil
}

func (m *EverloopImage) GetEverloopLength() int32 {
	if m != nil {
		return m.EverloopLength
	}
	return 0
}

// Servo handler params
type ServoParams struct {
	// GPIO to config
	Pin uint32 `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	// Servo angle
	Angle                uint32   `protobuf:"varint,2,opt,name=angle,proto3" json:"angle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServoParams) Reset()         { *m = ServoParams{} }
func (m *ServoParams) String() string { return proto.CompactTextString(m) }
func (*ServoParams) ProtoMessage()    {}
func (*ServoParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{2}
}

func (m *ServoParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServoParams.Unmarshal(m, b)
}
func (m *ServoParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServoParams.Marshal(b, m, deterministic)
}
func (m *ServoParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServoParams.Merge(m, src)
}
func (m *ServoParams) XXX_Size() int {
	return xxx_messageInfo_ServoParams.Size(m)
}
func (m *ServoParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ServoParams.DiscardUnknown(m)
}

var xxx_messageInfo_ServoParams proto.InternalMessageInfo

func (m *ServoParams) GetPin() uint32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

func (m *ServoParams) GetAngle() uint32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

// GPIO handler params
type GpioParams struct {
	// GPIO to config
	Pin  uint32              `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Mode GpioParams_EnumMode `protobuf:"varint,2,opt,name=mode,proto3,enum=matrix_io.malos.v1.io.GpioParams_EnumMode" json:"mode,omitempty"`
	// GPIO value
	Value uint32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// GPIO vector value
	Values               uint32   `protobuf:"varint,4,opt,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GpioParams) Reset()         { *m = GpioParams{} }
func (m *GpioParams) String() string { return proto.CompactTextString(m) }
func (*GpioParams) ProtoMessage()    {}
func (*GpioParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{3}
}

func (m *GpioParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GpioParams.Unmarshal(m, b)
}
func (m *GpioParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GpioParams.Marshal(b, m, deterministic)
}
func (m *GpioParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GpioParams.Merge(m, src)
}
func (m *GpioParams) XXX_Size() int {
	return xxx_messageInfo_GpioParams.Size(m)
}
func (m *GpioParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GpioParams.DiscardUnknown(m)
}

var xxx_messageInfo_GpioParams proto.InternalMessageInfo

func (m *GpioParams) GetPin() uint32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

func (m *GpioParams) GetMode() GpioParams_EnumMode {
	if m != nil {
		return m.Mode
	}
	return GpioParams_INPUT
}

func (m *GpioParams) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GpioParams) GetValues() uint32 {
	if m != nil {
		return m.Values
	}
	return 0
}

// Microphone Array params
type MicArrayParams struct {
	// gain for all microphones
	Gain int32 `protobuf:"varint,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// Spherical coordinates for beamforming (azimutal_angle,
	// polar_angle, radial_distance_mm).
	//
	// azimutal angle (must lie between -pi/2 an pi/2)
	AzimutalAngle float32 `protobuf:"fixed32,2,opt,name=azimutal_angle,json=azimutalAngle,proto3" json:"azimutal_angle,omitempty"`
	// polar angle (must lie between -pi/2 an pi/2)
	PolarAngle float32 `protobuf:"fixed32,3,opt,name=polar_angle,json=polarAngle,proto3" json:"polar_angle,omitempty"`
	// distance from the center of the MATRIX Creator to the sound source.
	RadialDistanceMm float32 `protobuf:"fixed32,4,opt,name=radial_distance_mm,json=radialDistanceMm,proto3" json:"radial_distance_mm,omitempty"`
	// sound speed in mm/seg
	SoundSpeedMmseg float32 `protobuf:"fixed32,5,opt,name=sound_speed_mmseg,json=soundSpeedMmseg,proto3" json:"sound_speed_mmseg,omitempty"`
	// sampling frequency in Hz
	SamplingFrequencyHz  uint32   `protobuf:"varint,6,opt,name=sampling_frequency_hz,json=samplingFrequencyHz,proto3" json:"sampling_frequency_hz,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MicArrayParams) Reset()         { *m = MicArrayParams{} }
func (m *MicArrayParams) String() string { return proto.CompactTextString(m) }
func (*MicArrayParams) ProtoMessage()    {}
func (*MicArrayParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{4}
}

func (m *MicArrayParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MicArrayParams.Unmarshal(m, b)
}
func (m *MicArrayParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MicArrayParams.Marshal(b, m, deterministic)
}
func (m *MicArrayParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicArrayParams.Merge(m, src)
}
func (m *MicArrayParams) XXX_Size() int {
	return xxx_messageInfo_MicArrayParams.Size(m)
}
func (m *MicArrayParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MicArrayParams.DiscardUnknown(m)
}

var xxx_messageInfo_MicArrayParams proto.InternalMessageInfo

func (m *MicArrayParams) GetGain() int32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *MicArrayParams) GetAzimutalAngle() float32 {
	if m != nil {
		return m.AzimutalAngle
	}
	return 0
}

func (m *MicArrayParams) GetPolarAngle() float32 {
	if m != nil {
		return m.PolarAngle
	}
	return 0
}

func (m *MicArrayParams) GetRadialDistanceMm() float32 {
	if m != nil {
		return m.RadialDistanceMm
	}
	return 0
}

func (m *MicArrayParams) GetSoundSpeedMmseg() float32 {
	if m != nil {
		return m.SoundSpeedMmseg
	}
	return 0
}

func (m *MicArrayParams) GetSamplingFrequencyHz() uint32 {
	if m != nil {
		return m.SamplingFrequencyHz
	}
	return 0
}

type WakeWordParams struct {
	// Wake Word
	WakeWord string                    `protobuf:"bytes,1,opt,name=wake_word,json=wakeWord,proto3" json:"wake_word,omitempty"`
	Channel  WakeWordParams_MicChannel `protobuf:"varint,2,opt,name=channel,proto3,enum=matrix_io.malos.v1.io.WakeWordParams_MicChannel" json:"channel,omitempty"`
	// lenguaje model path from lmtool or similar alternative:
	// http://www.speech.cs.cmu.edu/tools/lmtool-new.html
	LmPath string `protobuf:"bytes,3,opt,name=lm_path,json=lmPath,proto3" json:"lm_path,omitempty"`
	// dictionary path from lmtool
	DicPath string `protobuf:"bytes,4,opt,name=dic_path,json=dicPath,proto3" json:"dic_path,omitempty"`
	// enable pocketsphinx verbose mode
	EnableVerbose bool `protobuf:"varint,5,opt,name=enable_verbose,json=enableVerbose,proto3" json:"enable_verbose,omitempty"`
	// stop recognition service
	StopRecognition      bool     `protobuf:"varint,6,opt,name=stop_recognition,json=stopRecognition,proto3" json:"stop_recognition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WakeWordParams) Reset()         { *m = WakeWordParams{} }
func (m *WakeWordParams) String() string { return proto.CompactTextString(m) }
func (*WakeWordParams) ProtoMessage()    {}
func (*WakeWordParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{5}
}

func (m *WakeWordParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WakeWordParams.Unmarshal(m, b)
}
func (m *WakeWordParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WakeWordParams.Marshal(b, m, deterministic)
}
func (m *WakeWordParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WakeWordParams.Merge(m, src)
}
func (m *WakeWordParams) XXX_Size() int {
	return xxx_messageInfo_WakeWordParams.Size(m)
}
func (m *WakeWordParams) XXX_DiscardUnknown() {
	xxx_messageInfo_WakeWordParams.DiscardUnknown(m)
}

var xxx_messageInfo_WakeWordParams proto.InternalMessageInfo

func (m *WakeWordParams) GetWakeWord() string {
	if m != nil {
		return m.WakeWord
	}
	return ""
}

func (m *WakeWordParams) GetChannel() WakeWordParams_MicChannel {
	if m != nil {
		return m.Channel
	}
	return WakeWordParams_channel0
}

func (m *WakeWordParams) GetLmPath() string {
	if m != nil {
		return m.LmPath
	}
	return ""
}

func (m *WakeWordParams) GetDicPath() string {
	if m != nil {
		return m.DicPath
	}
	return ""
}

func (m *WakeWordParams) GetEnableVerbose() bool {
	if m != nil {
		return m.EnableVerbose
	}
	return false
}

func (m *WakeWordParams) GetStopRecognition() bool {
	if m != nil {
		return m.StopRecognition
	}
	return false
}

type MatrixDeviceParams struct {
	// Matrix Device Type (1: CREATOR - 2:VOICE)
	DeviceType           EnumMatrixDeviceType `protobuf:"varint,1,opt,name=device_type,json=deviceType,proto3,enum=matrix_io.malos.v1.io.EnumMatrixDeviceType" json:"device_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MatrixDeviceParams) Reset()         { *m = MatrixDeviceParams{} }
func (m *MatrixDeviceParams) String() string { return proto.CompactTextString(m) }
func (*MatrixDeviceParams) ProtoMessage()    {}
func (*MatrixDeviceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8961acb3747a91b5, []int{6}
}

func (m *MatrixDeviceParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatrixDeviceParams.Unmarshal(m, b)
}
func (m *MatrixDeviceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatrixDeviceParams.Marshal(b, m, deterministic)
}
func (m *MatrixDeviceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatrixDeviceParams.Merge(m, src)
}
func (m *MatrixDeviceParams) XXX_Size() int {
	return xxx_messageInfo_MatrixDeviceParams.Size(m)
}
func (m *MatrixDeviceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MatrixDeviceParams.DiscardUnknown(m)
}

var xxx_messageInfo_MatrixDeviceParams proto.InternalMessageInfo

func (m *MatrixDeviceParams) GetDeviceType() EnumMatrixDeviceType {
	if m != nil {
		return m.DeviceType
	}
	return EnumMatrixDeviceType_UNDETECTED
}

func init() {
	proto.RegisterEnum("matrix_io.malos.v1.io.EnumMatrixDeviceType", EnumMatrixDeviceType_name, EnumMatrixDeviceType_value)
	proto.RegisterEnum("matrix_io.malos.v1.io.GpioParams_EnumMode", GpioParams_EnumMode_name, GpioParams_EnumMode_value)
	proto.RegisterEnum("matrix_io.malos.v1.io.WakeWordParams_MicChannel", WakeWordParams_MicChannel_name, WakeWordParams_MicChannel_value)
	proto.RegisterType((*LedValue)(nil), "matrix_io.malos.v1.io.LedValue")
	proto.RegisterType((*EverloopImage)(nil), "matrix_io.malos.v1.io.EverloopImage")
	proto.RegisterType((*ServoParams)(nil), "matrix_io.malos.v1.io.ServoParams")
	proto.RegisterType((*GpioParams)(nil), "matrix_io.malos.v1.io.GpioParams")
	proto.RegisterType((*MicArrayParams)(nil), "matrix_io.malos.v1.io.MicArrayParams")
	proto.RegisterType((*WakeWordParams)(nil), "matrix_io.malos.v1.io.WakeWordParams")
	proto.RegisterType((*MatrixDeviceParams)(nil), "matrix_io.malos.v1.io.MatrixDeviceParams")
}

func init() { proto.RegisterFile("matrix_io/malos/v1/io.proto", fileDescriptor_8961acb3747a91b5) }

var fileDescriptor_8961acb3747a91b5 = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0xf3, 0xdf, 0x13, 0x9a, 0x9a, 0xa1, 0x0b, 0x41, 0xbd, 0x58, 0xb0, 0xb4, 0x62, 0x29,
	0xac, 0xb3, 0xc9, 0xb2, 0xb0, 0x57, 0x2b, 0x75, 0xdb, 0x00, 0x41, 0xcd, 0x26, 0x9a, 0x4d, 0xbb,
	0x12, 0x42, 0xb2, 0x26, 0xf6, 0xc1, 0x19, 0xd5, 0x33, 0x63, 0xc6, 0x4e, 0x4a, 0xfa, 0x08, 0x88,
	0x27, 0xe1, 0x86, 0xf7, 0xe3, 0x0a, 0x79, 0x6c, 0x37, 0x46, 0xb4, 0x77, 0xe7, 0xfb, 0x39, 0x67,
	0xbe, 0x39, 0x93, 0x18, 0x8e, 0x05, 0x4b, 0x35, 0xff, 0xdd, 0xe3, 0x6a, 0x20, 0x58, 0xa4, 0x92,
	0xc1, 0x66, 0x38, 0xe0, 0xca, 0x8d, 0xb5, 0x4a, 0x15, 0x79, 0x74, 0x27, 0xba, 0x46, 0x74, 0x37,
	0x43, 0x97, 0x2b, 0xe7, 0x17, 0xe8, 0x5c, 0x60, 0x70, 0xc5, 0xa2, 0x35, 0x12, 0x1b, 0xea, 0x1a,
	0x83, 0xbe, 0xf5, 0x99, 0xf5, 0xf4, 0x80, 0x66, 0x25, 0x39, 0x82, 0x66, 0xa8, 0x11, 0x65, 0xbf,
	0x66, 0xb8, 0x1c, 0x10, 0x02, 0x8d, 0x65, 0xb4, 0xc6, 0x7e, 0xdd, 0x90, 0xa6, 0xce, 0x9c, 0x37,
	0x2b, 0x9e, 0x62, 0xbf, 0x91, 0x3b, 0x0d, 0x70, 0xae, 0xe1, 0x60, 0xbc, 0x41, 0x1d, 0x29, 0x15,
	0x4f, 0x04, 0x0b, 0x91, 0x0c, 0xa1, 0x1e, 0x99, 0x23, 0xea, 0x4f, 0xbb, 0xa3, 0xc7, 0xee, 0xbd,
	0x99, 0xdc, 0x32, 0x10, 0xcd, 0xbc, 0xe4, 0x0b, 0x38, 0xc4, 0x62, 0x86, 0x17, 0xa1, 0x0c, 0xd3,
	0x95, 0x49, 0xd3, 0xa4, 0xbd, 0x92, 0xbe, 0x30, 0xac, 0xf3, 0x12, 0xba, 0xef, 0x50, 0x6f, 0xd4,
	0x9c, 0x69, 0x26, 0x92, 0xec, 0x36, 0x31, 0x97, 0xe5, 0x6d, 0x62, 0x2e, 0xb3, 0x8c, 0x4c, 0x86,
	0x11, 0x96, 0xb7, 0x31, 0xc0, 0xf9, 0xdb, 0x02, 0xf8, 0x21, 0xe6, 0x0f, 0xb7, 0xbd, 0x86, 0x86,
	0x50, 0x41, 0xde, 0xd5, 0x1b, 0x9d, 0x3c, 0x10, 0x7a, 0x37, 0xc2, 0x1d, 0xcb, 0xb5, 0x98, 0xaa,
	0x00, 0xa9, 0xe9, 0xcb, 0x8e, 0xdd, 0xb0, 0xdd, 0xbe, 0x72, 0x40, 0x3e, 0x86, 0x96, 0x29, 0x92,
	0x62, 0x63, 0x05, 0x72, 0x3e, 0x87, 0x4e, 0xd9, 0x4f, 0xf6, 0xa1, 0x39, 0x79, 0x3b, 0xbf, 0x5c,
	0xd8, 0x7b, 0x04, 0xa0, 0x35, 0xbb, 0x5c, 0x64, 0xb5, 0xe5, 0xfc, 0x63, 0x41, 0x6f, 0xca, 0xfd,
	0x53, 0xad, 0xd9, 0xb6, 0x48, 0x4d, 0xa0, 0x11, 0xb2, 0x22, 0x76, 0x93, 0x9a, 0x9a, 0x3c, 0x81,
	0x1e, 0xbb, 0xe5, 0x62, 0x9d, 0xb2, 0xc8, 0xdb, 0xdd, 0xbb, 0x46, 0x0f, 0x4a, 0xf6, 0x34, 0x23,
	0xc9, 0x63, 0xe8, 0xc6, 0x2a, 0x62, 0xba, 0xf0, 0xd4, 0x8d, 0x07, 0x0c, 0x95, 0x1b, 0xbe, 0x06,
	0xa2, 0x59, 0xc0, 0x59, 0xe4, 0x05, 0x3c, 0x49, 0x99, 0xf4, 0xd1, 0x13, 0xc2, 0xa4, 0xae, 0x51,
	0x3b, 0x57, 0xce, 0x0b, 0x61, 0x2a, 0xc8, 0x09, 0x7c, 0x98, 0xa8, 0xb5, 0x0c, 0xbc, 0x24, 0x46,
	0x0c, 0x3c, 0x21, 0x12, 0x0c, 0xfb, 0x4d, 0x63, 0x3e, 0x34, 0xc2, 0xbb, 0x8c, 0x9f, 0x66, 0x34,
	0x19, 0xc1, 0xa3, 0x84, 0x89, 0x38, 0xe2, 0x32, 0xf4, 0x7e, 0xd5, 0xf8, 0xdb, 0x1a, 0xa5, 0xbf,
	0xf5, 0x56, 0xb7, 0xfd, 0x96, 0x59, 0xc9, 0x47, 0xa5, 0xf8, 0x7d, 0xa9, 0xfd, 0x78, 0xeb, 0xfc,
	0x59, 0x87, 0xde, 0x7b, 0x76, 0x8d, 0xef, 0x95, 0x0e, 0x8a, 0xcb, 0x1f, 0xc3, 0xfe, 0x0d, 0xbb,
	0x46, 0xef, 0x46, 0xe9, 0xfc, 0xd7, 0xbb, 0x4f, 0x3b, 0x37, 0x85, 0x85, 0xfc, 0x04, 0x6d, 0x7f,
	0xc5, 0xa4, 0xc4, 0xa8, 0x78, 0xc0, 0xe7, 0x0f, 0x3c, 0xe0, 0x7f, 0x87, 0xba, 0x53, 0xee, 0x9f,
	0xe5, 0x7d, 0xb4, 0x1c, 0x40, 0x3e, 0x81, 0x76, 0x24, 0xbc, 0x98, 0xa5, 0x2b, 0xb3, 0xa6, 0x7d,
	0xda, 0x8a, 0xc4, 0x9c, 0xa5, 0x2b, 0xf2, 0x29, 0x74, 0x02, 0xee, 0xe7, 0x4a, 0xc3, 0x28, 0xed,
	0x80, 0xfb, 0x46, 0x7a, 0x02, 0x3d, 0x94, 0x6c, 0x19, 0xa1, 0xb7, 0x41, 0xbd, 0x54, 0x09, 0x9a,
	0x65, 0x74, 0xe8, 0x41, 0xce, 0x5e, 0xe5, 0x24, 0xf9, 0x12, 0xec, 0x24, 0x55, 0xb1, 0xa7, 0xd1,
	0x57, 0xa1, 0xe4, 0x29, 0x57, 0xd2, 0x6c, 0xa1, 0x43, 0x0f, 0x33, 0x9e, 0xee, 0x68, 0xe7, 0x0f,
	0x0b, 0x60, 0x97, 0x8e, 0x7c, 0x00, 0x9d, 0x22, 0xdf, 0x73, 0x7b, 0xaf, 0x82, 0x86, 0xb6, 0x55,
	0x41, 0x23, 0xbb, 0x56, 0x41, 0x2f, 0xec, 0x7a, 0x05, 0x7d, 0x63, 0x37, 0x2a, 0xe8, 0xa5, 0xdd,
	0xac, 0xa0, 0x6f, 0xed, 0x56, 0x05, 0x7d, 0x67, 0xb7, 0x2b, 0xe8, 0x95, 0xdd, 0x71, 0x96, 0x40,
	0xa6, 0x66, 0x9d, 0xe7, 0xb8, 0xe1, 0x3e, 0x16, 0x2f, 0x72, 0x01, 0xdd, 0xc0, 0x60, 0x2f, 0xdd,
	0xc6, 0x68, 0xde, 0xa4, 0x37, 0xfa, 0xea, 0x81, 0xc5, 0x9b, 0x9f, 0x7b, 0x65, 0xc6, 0x62, 0x1b,
	0x23, 0x85, 0xe0, 0xae, 0x3e, 0x79, 0x0d, 0x47, 0xf7, 0x79, 0x48, 0x0f, 0xe0, 0xf2, 0xed, 0xf9,
	0x78, 0x31, 0x3e, 0x5b, 0x8c, 0xcf, 0xed, 0x3d, 0xd2, 0x85, 0xf6, 0x19, 0x1d, 0x9f, 0x2e, 0x66,
	0xd4, 0xb6, 0xb2, 0xff, 0xce, 0xd5, 0x6c, 0x72, 0x36, 0xb6, 0x6b, 0x6f, 0xb6, 0x70, 0xac, 0x24,
	0x16, 0xa7, 0x97, 0x1f, 0xc4, 0xbb, 0x08, 0x6f, 0xda, 0x93, 0xd9, 0x3c, 0x63, 0xe6, 0xd6, 0xcf,
	0xaf, 0x42, 0x9e, 0xae, 0xd6, 0x4b, 0xd7, 0x57, 0x62, 0x90, 0xdb, 0x9f, 0x71, 0x35, 0x08, 0xd5,
	0xb3, 0x02, 0x98, 0xce, 0x64, 0xf0, 0xff, 0xef, 0xec, 0x5f, 0xb5, 0xa3, 0x3c, 0xde, 0x64, 0xe6,
	0x4e, 0xcd, 0xe0, 0xc9, 0xcc, 0xbd, 0x1a, 0x2e, 0x5b, 0xa6, 0xe3, 0xc5, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x1f, 0xde, 0x81, 0x09, 0x9b, 0x05, 0x00, 0x00,
}
