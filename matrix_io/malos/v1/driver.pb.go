// Code generated by protoc-gen-go. DO NOT EDIT.
// source: matrix_io/malos/v1/driver.proto

package matrix_io_malos_v1_driver

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// configuration of drivers. Both global configuration and
// for specific drivers.
type DriverConfig struct {
	// Delay between updates. In seconds.
	DelayBetweenUpdates float32 `protobuf:"fixed32,1,opt,name=delay_between_updates,json=delayBetweenUpdates,proto3" json:"delay_between_updates,omitempty"`
	// Timeout after last ping.
	TimeoutAfterLastPing float32 `protobuf:"fixed32,2,opt,name=timeout_after_last_ping,json=timeoutAfterLastPing,proto3" json:"timeout_after_last_ping,omitempty"`
	// Values for LEDs. When configuring the driver you should leave
	// delay_between_updates and timeout_after_last_ping unchanged.
	Image *EverloopImage `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Malos-Eye configuration.
	MalosEyeConfig *MalosEyeConfig `protobuf:"bytes,4,opt,name=malos_eye_config,json=malosEyeConfig,proto3" json:"malos_eye_config,omitempty"`
	// ZigBee Message.
	ZigbeeMessage *ZigBeeMsg `protobuf:"bytes,5,opt,name=zigbee_message,json=zigbeeMessage,proto3" json:"zigbee_message,omitempty"`
	// LIRC service configuration for IR commands.
	Lirc *LircParams `protobuf:"bytes,6,opt,name=lirc,proto3" json:"lirc,omitempty"`
	// ServoMotor service configuration
	Servo *ServoParams `protobuf:"bytes,7,opt,name=servo,proto3" json:"servo,omitempty"`
	// Gpio service configuration
	Gpio *GpioParams `protobuf:"bytes,8,opt,name=gpio,proto3" json:"gpio,omitempty"`
	// Humidity configuration
	Humidity *HumidityParams `protobuf:"bytes,9,opt,name=humidity,proto3" json:"humidity,omitempty"`
	// Microphone Array configuration
	Micarray *MicArrayParams `protobuf:"bytes,10,opt,name=micarray,proto3" json:"micarray,omitempty"`
	//  ZWave message for send commands through the Z/IP Gateway
	Zwave *ZWaveMsg `protobuf:"bytes,11,opt,name=zwave,proto3" json:"zwave,omitempty"`
	// Pocket Sphinx wake word configuration
	Wakeword *WakeWordParams `protobuf:"bytes,12,opt,name=wakeword,proto3" json:"wakeword,omitempty"`
	// Matrix Device parameters
	MatrixDevice         *MatrixDeviceParams `protobuf:"bytes,13,opt,name=matrix_device,json=matrixDevice,proto3" json:"matrix_device,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DriverConfig) Reset()         { *m = DriverConfig{} }
func (m *DriverConfig) String() string { return proto.CompactTextString(m) }
func (*DriverConfig) ProtoMessage()    {}
func (*DriverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d47624f3190bad3a, []int{0}
}

func (m *DriverConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriverConfig.Unmarshal(m, b)
}
func (m *DriverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriverConfig.Marshal(b, m, deterministic)
}
func (m *DriverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverConfig.Merge(m, src)
}
func (m *DriverConfig) XXX_Size() int {
	return xxx_messageInfo_DriverConfig.Size(m)
}
func (m *DriverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DriverConfig proto.InternalMessageInfo

func (m *DriverConfig) GetDelayBetweenUpdates() float32 {
	if m != nil {
		return m.DelayBetweenUpdates
	}
	return 0
}

func (m *DriverConfig) GetTimeoutAfterLastPing() float32 {
	if m != nil {
		return m.TimeoutAfterLastPing
	}
	return 0
}

func (m *DriverConfig) GetImage() *EverloopImage {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *DriverConfig) GetMalosEyeConfig() *MalosEyeConfig {
	if m != nil {
		return m.MalosEyeConfig
	}
	return nil
}

func (m *DriverConfig) GetZigbeeMessage() *ZigBeeMsg {
	if m != nil {
		return m.ZigbeeMessage
	}
	return nil
}

func (m *DriverConfig) GetLirc() *LircParams {
	if m != nil {
		return m.Lirc
	}
	return nil
}

func (m *DriverConfig) GetServo() *ServoParams {
	if m != nil {
		return m.Servo
	}
	return nil
}

func (m *DriverConfig) GetGpio() *GpioParams {
	if m != nil {
		return m.Gpio
	}
	return nil
}

func (m *DriverConfig) GetHumidity() *HumidityParams {
	if m != nil {
		return m.Humidity
	}
	return nil
}

func (m *DriverConfig) GetMicarray() *MicArrayParams {
	if m != nil {
		return m.Micarray
	}
	return nil
}

func (m *DriverConfig) GetZwave() *ZWaveMsg {
	if m != nil {
		return m.Zwave
	}
	return nil
}

func (m *DriverConfig) GetWakeword() *WakeWordParams {
	if m != nil {
		return m.Wakeword
	}
	return nil
}

func (m *DriverConfig) GetMatrixDevice() *MatrixDeviceParams {
	if m != nil {
		return m.MatrixDevice
	}
	return nil
}

// Message used by MALOS to report its internal state and the configuration of
// its drivers.
type DriverInfo struct {
	// Driver name.
	DriverName string `protobuf:"bytes,1,opt,name=driver_name,json=driverName,proto3" json:"driver_name,omitempty"`
	// Base port: Port where the device is located.
	// base_port => config channel (0MQ pull, you should push)
	// base_port + 1 => keepalive channel (0MQ pull, you should push)
	// base_port + 2 => error channel (0MQ push, you should pull)
	// base_port + 3 => send update channel (0MQ push, you should pull)
	BasePort int32 `protobuf:"varint,2,opt,name=base_port,json=basePort,proto3" json:"base_port,omitempty"`
	// Does the device provide updates? Some devices such as the everloop
	// LED array don't provide updates.
	ProvidesUpdates bool `protobuf:"varint,3,opt,name=provides_updates,json=providesUpdates,proto3" json:"provides_updates,omitempty"`
	// What is the device delay between updates? In milliseconds.
	// This field only makes sense if provides_updates is set.
	DelayBetweenUpdates int32 `protobuf:"varint,4,opt,name=delay_between_updates,json=delayBetweenUpdates,proto3" json:"delay_between_updates,omitempty"`
	// Does the device need pings (keepalive messages) to keep returning messages?
	NeedsPings bool `protobuf:"varint,5,opt,name=needs_pings,json=needsPings,proto3" json:"needs_pings,omitempty"`
	// This field only makes sense if needs_pings is set.
	// If the device hasn't received keepalive messages in a time interenal
	// bigger than this amount, the device will stop sending updates.
	TimeoutAfterLastPing int32 `protobuf:"varint,6,opt,name=timeout_after_last_ping,json=timeoutAfterLastPing,proto3" json:"timeout_after_last_ping,omitempty"`
	// Notes set by the driver. Meant to be read by humans.
	NotesForHuman        string   `protobuf:"bytes,7,opt,name=notes_for_human,json=notesForHuman,proto3" json:"notes_for_human,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriverInfo) Reset()         { *m = DriverInfo{} }
func (m *DriverInfo) String() string { return proto.CompactTextString(m) }
func (*DriverInfo) ProtoMessage()    {}
func (*DriverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d47624f3190bad3a, []int{1}
}

func (m *DriverInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriverInfo.Unmarshal(m, b)
}
func (m *DriverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriverInfo.Marshal(b, m, deterministic)
}
func (m *DriverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverInfo.Merge(m, src)
}
func (m *DriverInfo) XXX_Size() int {
	return xxx_messageInfo_DriverInfo.Size(m)
}
func (m *DriverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DriverInfo proto.InternalMessageInfo

func (m *DriverInfo) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DriverInfo) GetBasePort() int32 {
	if m != nil {
		return m.BasePort
	}
	return 0
}

func (m *DriverInfo) GetProvidesUpdates() bool {
	if m != nil {
		return m.ProvidesUpdates
	}
	return false
}

func (m *DriverInfo) GetDelayBetweenUpdates() int32 {
	if m != nil {
		return m.DelayBetweenUpdates
	}
	return 0
}

func (m *DriverInfo) GetNeedsPings() bool {
	if m != nil {
		return m.NeedsPings
	}
	return false
}

func (m *DriverInfo) GetTimeoutAfterLastPing() int32 {
	if m != nil {
		return m.TimeoutAfterLastPing
	}
	return 0
}

func (m *DriverInfo) GetNotesForHuman() string {
	if m != nil {
		return m.NotesForHuman
	}
	return ""
}

// Information about all the available drivers.
type MalosDriverInfo struct {
	// The available drivers.
	Info                 []*DriverInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MalosDriverInfo) Reset()         { *m = MalosDriverInfo{} }
func (m *MalosDriverInfo) String() string { return proto.CompactTextString(m) }
func (*MalosDriverInfo) ProtoMessage()    {}
func (*MalosDriverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d47624f3190bad3a, []int{2}
}

func (m *MalosDriverInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MalosDriverInfo.Unmarshal(m, b)
}
func (m *MalosDriverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MalosDriverInfo.Marshal(b, m, deterministic)
}
func (m *MalosDriverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MalosDriverInfo.Merge(m, src)
}
func (m *MalosDriverInfo) XXX_Size() int {
	return xxx_messageInfo_MalosDriverInfo.Size(m)
}
func (m *MalosDriverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MalosDriverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MalosDriverInfo proto.InternalMessageInfo

func (m *MalosDriverInfo) GetInfo() []*DriverInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*DriverConfig)(nil), "matrix_io.malos.v1.driver.DriverConfig")
	proto.RegisterType((*DriverInfo)(nil), "matrix_io.malos.v1.driver.DriverInfo")
	proto.RegisterType((*MalosDriverInfo)(nil), "matrix_io.malos.v1.driver.MalosDriverInfo")
}

func init() { proto.RegisterFile("matrix_io/malos/v1/driver.proto", fileDescriptor_d47624f3190bad3a) }

var fileDescriptor_d47624f3190bad3a = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x7f, 0x4f, 0xd3, 0x40,
	0x18, 0xc7, 0xb3, 0xb1, 0xcd, 0xed, 0xc6, 0x80, 0x9c, 0x1a, 0x2b, 0x44, 0x81, 0xf9, 0x23, 0x10,
	0x93, 0x12, 0x30, 0x04, 0xf5, 0x3f, 0x26, 0x08, 0x4b, 0x18, 0x2e, 0x35, 0x48, 0xe2, 0x3f, 0xcd,
	0xad, 0x7d, 0x56, 0x2e, 0xec, 0x7a, 0xcd, 0x5d, 0xd7, 0x39, 0xde, 0x91, 0xbe, 0x20, 0x5f, 0x8f,
	0xe9, 0x73, 0xed, 0xc4, 0xa4, 0xe5, 0xbf, 0xf6, 0x79, 0xbe, 0x9f, 0xef, 0xfd, 0xfc, 0x1e, 0xd9,
	0x14, 0x2c, 0x56, 0xfc, 0xa7, 0xcb, 0xe5, 0x9e, 0x60, 0x13, 0xa9, 0xf7, 0x92, 0xfd, 0x3d, 0x5f,
	0xf1, 0x04, 0x94, 0x1d, 0x29, 0x19, 0x4b, 0xfa, 0x7c, 0x21, 0xb0, 0x51, 0x60, 0x27, 0xfb, 0xb6,
	0x11, 0xac, 0xbf, 0x28, 0x60, 0x3d, 0x29, 0x84, 0x21, 0xd7, 0x37, 0x0a, 0xda, 0x5c, 0x66, 0xcd,
	0xed, 0x82, 0x26, 0x7e, 0xc0, 0x1c, 0x32, 0xc9, 0xcb, 0x02, 0x89, 0x86, 0x50, 0x67, 0xfd, 0xee,
	0x9f, 0x06, 0x59, 0x3e, 0xc1, 0x99, 0x7c, 0x96, 0xe1, 0x98, 0x07, 0xf4, 0x80, 0x3c, 0xf5, 0x61,
	0xc2, 0xe6, 0xee, 0x08, 0xe2, 0x19, 0x40, 0xe8, 0x4e, 0x23, 0x9f, 0xc5, 0xa0, 0xad, 0xca, 0x56,
	0x65, 0xa7, 0xea, 0x3c, 0xc6, 0x66, 0xcf, 0xf4, 0xae, 0x4c, 0x8b, 0x1e, 0x92, 0x67, 0x31, 0x17,
	0x20, 0xa7, 0xb1, 0xcb, 0xc6, 0x31, 0x28, 0x77, 0xc2, 0x74, 0xec, 0x46, 0x3c, 0x0c, 0xac, 0x2a,
	0x52, 0x4f, 0xb2, 0xf6, 0x71, 0xda, 0xbd, 0x60, 0x3a, 0x1e, 0xf2, 0x30, 0xa0, 0x9f, 0x48, 0x9d,
	0x0b, 0x16, 0x80, 0xb5, 0xb4, 0x55, 0xd9, 0x69, 0x1f, 0xbc, 0xb6, 0x0b, 0x76, 0x89, 0x4b, 0xfb,
	0x34, 0x01, 0x35, 0x91, 0x32, 0xea, 0xa7, 0x5a, 0xc7, 0x20, 0xf4, 0x8a, 0xac, 0xa1, 0xc6, 0x85,
	0x39, 0xb8, 0x1e, 0x4e, 0xdd, 0xaa, 0xa1, 0xcd, 0xbb, 0x22, 0x9b, 0xc5, 0xae, 0x0c, 0xd2, 0x8f,
	0xd3, 0x39, 0x98, 0xd5, 0x3a, 0x2b, 0xe2, 0xbf, 0x7f, 0xda, 0x27, 0x2b, 0x77, 0x3c, 0x18, 0x01,
	0xb8, 0x02, 0xb4, 0x4e, 0xe7, 0x56, 0x47, 0xd3, 0x6e, 0x91, 0x29, 0x1e, 0xd3, 0x0f, 0x1e, 0xf4,
	0x00, 0x06, 0x3a, 0x70, 0x3a, 0x86, 0x1c, 0x18, 0x90, 0x1e, 0x91, 0xda, 0x84, 0x2b, 0xcf, 0x6a,
	0xa0, 0xc1, 0xab, 0x52, 0x83, 0x0b, 0xae, 0xbc, 0x21, 0x53, 0x4c, 0x68, 0x07, 0x01, 0xfa, 0x81,
	0xd4, 0x35, 0xa8, 0x44, 0x5a, 0x8f, 0xca, 0x87, 0xe6, 0xd2, 0xfe, 0x96, 0x6a, 0x32, 0xd0, 0x00,
	0xf4, 0x90, 0xd4, 0x82, 0x88, 0x4b, 0xab, 0x89, 0xe0, 0x76, 0x09, 0x78, 0x16, 0xf1, 0x9c, 0x43,
	0x39, 0x3d, 0x21, 0xcd, 0x9b, 0xa9, 0xe0, 0x3e, 0x8f, 0xe7, 0x56, 0x0b, 0xd1, 0x9d, 0x22, 0xd4,
	0x5c, 0x9b, 0xf3, 0x4c, 0x99, 0x39, 0x2c, 0x48, 0x7a, 0x4c, 0x9a, 0x82, 0x7b, 0x4c, 0x29, 0x36,
	0xb7, 0x08, 0xba, 0xbc, 0x29, 0x99, 0xc0, 0x80, 0x7b, 0xc7, 0xa9, 0x2c, 0xb7, 0xc8, 0x31, 0x7a,
	0x44, 0xea, 0x77, 0x33, 0x96, 0x80, 0xd5, 0x2e, 0x5f, 0x80, 0xd9, 0xf4, 0x6b, 0x96, 0xe0, 0x9e,
	0x1b, 0x7d, 0x3a, 0xf6, 0x8c, 0xdd, 0xc2, 0x4c, 0x2a, 0xdf, 0x5a, 0x7e, 0x70, 0xec, 0x6b, 0x76,
	0x0b, 0xd7, 0x52, 0xf9, 0xf9, 0xd8, 0x39, 0x46, 0x2f, 0x49, 0x27, 0x23, 0x7c, 0x48, 0xb8, 0x07,
	0x56, 0x07, 0x7d, 0x76, 0xcb, 0xd6, 0x80, 0xd5, 0x13, 0x94, 0x66, 0x5e, 0xcb, 0xe2, 0x5e, 0xad,
	0xfb, 0xab, 0x4a, 0x88, 0x09, 0x56, 0x3f, 0x1c, 0x4b, 0xba, 0x49, 0xda, 0x26, 0xf0, 0x6e, 0xc8,
	0x04, 0x60, 0x98, 0x5a, 0x0e, 0x31, 0xa5, 0x4b, 0x26, 0x80, 0x6e, 0x90, 0xd6, 0x88, 0x69, 0x70,
	0x23, 0xa9, 0x62, 0x4c, 0x4d, 0xdd, 0x69, 0xa6, 0x85, 0xa1, 0x54, 0x31, 0xdd, 0x25, 0x6b, 0x91,
	0x92, 0x09, 0xf7, 0x41, 0x2f, 0xf2, 0x98, 0x86, 0xa6, 0xe9, 0xac, 0xe6, 0xf5, 0x3c, 0x8b, 0xa5,
	0xf9, 0xad, 0xa1, 0x67, 0x61, 0x7e, 0x37, 0x49, 0x3b, 0x04, 0xf0, 0x35, 0x46, 0x56, 0xe3, 0x95,
	0x6f, 0x3a, 0x04, 0x4b, 0x69, 0x50, 0x1f, 0x0c, 0x78, 0x03, 0x6d, 0x8b, 0x03, 0xfe, 0x96, 0xac,
	0x86, 0x32, 0x06, 0xed, 0x8e, 0xa5, 0x72, 0x6f, 0xa6, 0x82, 0x85, 0x78, 0xa7, 0x5b, 0x4e, 0x07,
	0xcb, 0x5f, 0xa4, 0x3a, 0x4f, 0x8b, 0xdd, 0x0b, 0xb2, 0x8a, 0xb9, 0xbc, 0xb7, 0x5f, 0x1f, 0x49,
	0x8d, 0x87, 0x63, 0x69, 0x55, 0xb6, 0x96, 0xca, 0x4e, 0x33, 0x7b, 0x61, 0xff, 0x41, 0x0e, 0x22,
	0xbd, 0x33, 0xb2, 0x21, 0x43, 0xc8, 0x88, 0xfc, 0xad, 0x5c, 0x60, 0xbd, 0xb6, 0x01, 0x86, 0x69,
	0x75, 0x58, 0xf9, 0x5d, 0xb5, 0xcc, 0x51, 0xf6, 0xbf, 0x9a, 0xb7, 0x21, 0xf3, 0xb3, 0xbf, 0xef,
	0x8f, 0x1a, 0x48, 0xbe, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xeb, 0x28, 0x2b, 0xdf, 0x05,
	0x00, 0x00,
}
