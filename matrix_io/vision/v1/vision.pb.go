// Code generated by protoc-gen-go. DO NOT EDIT.
// source: matrix_io/vision/v1/vision.proto

package visionV1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EnumFacialRecognitionTag int32

const (
	// Age classification.
	EnumFacialRecognitionTag_AGE EnumFacialRecognitionTag = 0
	// Emotion classification.
	EnumFacialRecognitionTag_EMOTION EnumFacialRecognitionTag = 1
	// Gender classification.
	EnumFacialRecognitionTag_GENDER EnumFacialRecognitionTag = 2
	// Identification.
	EnumFacialRecognitionTag_FACE_ID EnumFacialRecognitionTag = 3
	// Pose of the head (pitch, yaw, roll).
	EnumFacialRecognitionTag_HEAD_POSE EnumFacialRecognitionTag = 4
	// Features such as nose, eyes, mouth.
	EnumFacialRecognitionTag_FACE_FEATURES EnumFacialRecognitionTag = 5
	// Descriptor vector.
	EnumFacialRecognitionTag_FACE_DESCRIPTOR EnumFacialRecognitionTag = 6
	// Additional face classification
	// for detections tagged EnumDetectionTag.FACE
	// permits to discard false possitives
	EnumFacialRecognitionTag_IS_FACE EnumFacialRecognitionTag = 7
)

var EnumFacialRecognitionTag_name = map[int32]string{
	0: "AGE",
	1: "EMOTION",
	2: "GENDER",
	3: "FACE_ID",
	4: "HEAD_POSE",
	5: "FACE_FEATURES",
	6: "FACE_DESCRIPTOR",
	7: "IS_FACE",
}

var EnumFacialRecognitionTag_value = map[string]int32{
	"AGE":             0,
	"EMOTION":         1,
	"GENDER":          2,
	"FACE_ID":         3,
	"HEAD_POSE":       4,
	"FACE_FEATURES":   5,
	"FACE_DESCRIPTOR": 6,
	"IS_FACE":         7,
}

func (x EnumFacialRecognitionTag) String() string {
	return proto.EnumName(EnumFacialRecognitionTag_name, int32(x))
}

func (EnumFacialRecognitionTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{0}
}

type ZoneDirection int32

const (
	// We can get an unknown direction when the object enters and leaves
	// the zone from the same side or in other edge cases. This enumerator
	// is included here because it is still useful to report the session time
	// of the objects that traverse a zone.
	ZoneDirection_UNKNOWN  ZoneDirection = 0
	ZoneDirection_FORWARD  ZoneDirection = 1
	ZoneDirection_BACKWARD ZoneDirection = 2
)

var ZoneDirection_name = map[int32]string{
	0: "UNKNOWN",
	1: "FORWARD",
	2: "BACKWARD",
}

var ZoneDirection_value = map[string]int32{
	"UNKNOWN":  0,
	"FORWARD":  1,
	"BACKWARD": 2,
}

func (x ZoneDirection) String() string {
	return proto.EnumName(ZoneDirection_name, int32(x))
}

func (ZoneDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{1}
}

type EventTag int32

const (
	EventTag_TRACKING_START EventTag = 0
	EventTag_TRACKING_END   EventTag = 1
	EventTag_AREA_ENTER     EventTag = 2
	EventTag_AREA_EXIT      EventTag = 3
	EventTag_ZONE_ENTER     EventTag = 4
	EventTag_ZONE_EXIT      EventTag = 5
)

var EventTag_name = map[int32]string{
	0: "TRACKING_START",
	1: "TRACKING_END",
	2: "AREA_ENTER",
	3: "AREA_EXIT",
	4: "ZONE_ENTER",
	5: "ZONE_EXIT",
}

var EventTag_value = map[string]int32{
	"TRACKING_START": 0,
	"TRACKING_END":   1,
	"AREA_ENTER":     2,
	"AREA_EXIT":      3,
	"ZONE_ENTER":     4,
	"ZONE_EXIT":      5,
}

func (x EventTag) String() string {
	return proto.EnumName(EventTag_name, int32(x))
}

func (EventTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{2}
}

// When a detection is done, a tag specifies what is being detected.
type EnumDetectionTag int32

const (
	EnumDetectionTag_FACE       EnumDetectionTag = 0
	EnumDetectionTag_HAND_THUMB EnumDetectionTag = 1
	EnumDetectionTag_HAND_PALM  EnumDetectionTag = 2
	EnumDetectionTag_HAND_PINCH EnumDetectionTag = 3
	EnumDetectionTag_HAND_FIST  EnumDetectionTag = 4
	EnumDetectionTag_PERSON     EnumDetectionTag = 5
)

var EnumDetectionTag_name = map[int32]string{
	0: "FACE",
	1: "HAND_THUMB",
	2: "HAND_PALM",
	3: "HAND_PINCH",
	4: "HAND_FIST",
	5: "PERSON",
}

var EnumDetectionTag_value = map[string]int32{
	"FACE":       0,
	"HAND_THUMB": 1,
	"HAND_PALM":  2,
	"HAND_PINCH": 3,
	"HAND_FIST":  4,
	"PERSON":     5,
}

func (x EnumDetectionTag) String() string {
	return proto.EnumName(EnumDetectionTag_name, int32(x))
}

func (EnumDetectionTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{3}
}

type EnumDetectionAlgorithm int32

const (
	// Default algorithm.
	EnumDetectionAlgorithm_DEFAULT EnumDetectionAlgorithm = 0
	// First alternative.
	EnumDetectionAlgorithm_FIRST_ALTERNATIVE EnumDetectionAlgorithm = 1
)

var EnumDetectionAlgorithm_name = map[int32]string{
	0: "DEFAULT",
	1: "FIRST_ALTERNATIVE",
}

var EnumDetectionAlgorithm_value = map[string]int32{
	"DEFAULT":           0,
	"FIRST_ALTERNATIVE": 1,
}

func (x EnumDetectionAlgorithm) String() string {
	return proto.EnumName(EnumDetectionAlgorithm_name, int32(x))
}

func (EnumDetectionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{4}
}

// Video codecs available for vision requests
type EnumVideoCodec int32

const (
	EnumVideoCodec_UNDEFINED_VIDEO_CODEC EnumVideoCodec = 0
	EnumVideoCodec_H264                  EnumVideoCodec = 1
	EnumVideoCodec_MP4V                  EnumVideoCodec = 2
	EnumVideoCodec_RV24                  EnumVideoCodec = 3
	EnumVideoCodec_VP8                   EnumVideoCodec = 4
	EnumVideoCodec_VP9                   EnumVideoCodec = 5
)

var EnumVideoCodec_name = map[int32]string{
	0: "UNDEFINED_VIDEO_CODEC",
	1: "H264",
	2: "MP4V",
	3: "RV24",
	4: "VP8",
	5: "VP9",
}

var EnumVideoCodec_value = map[string]int32{
	"UNDEFINED_VIDEO_CODEC": 0,
	"H264":                  1,
	"MP4V":                  2,
	"RV24":                  3,
	"VP8":                   4,
	"VP9":                   5,
}

func (x EnumVideoCodec) String() string {
	return proto.EnumName(EnumVideoCodec_name, int32(x))
}

func (EnumVideoCodec) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{5}
}

type ImageFormat int32

const (
	ImageFormat_UNSPECIFIED ImageFormat = 0
	// unsigned byte, 3 channels. RGB.
	ImageFormat_FORMAT_8URGB ImageFormat = 1
	// unsigned byte, 3 channels. BGR.
	ImageFormat_FORMAT_8UBGR ImageFormat = 2
	// unsigned byte, 1 channel.
	ImageFormat_FORMAT_8U ImageFormat = 3
)

var ImageFormat_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "FORMAT_8URGB",
	2: "FORMAT_8UBGR",
	3: "FORMAT_8U",
}

var ImageFormat_value = map[string]int32{
	"UNSPECIFIED":  0,
	"FORMAT_8URGB": 1,
	"FORMAT_8UBGR": 2,
	"FORMAT_8U":    3,
}

func (x ImageFormat) String() string {
	return proto.EnumName(ImageFormat_name, int32(x))
}

func (ImageFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{6}
}

// Genders available for detections.
// TODO(vision.team): Should this be GenderExpression? If that's the case, at some
// point we might need to add NEUTRAL to the options.
type FacialRecognition_Gender int32

const (
	FacialRecognition_MALE   FacialRecognition_Gender = 0
	FacialRecognition_FEMALE FacialRecognition_Gender = 1
)

var FacialRecognition_Gender_name = map[int32]string{
	0: "MALE",
	1: "FEMALE",
}

var FacialRecognition_Gender_value = map[string]int32{
	"MALE":   0,
	"FEMALE": 1,
}

func (x FacialRecognition_Gender) String() string {
	return proto.EnumName(FacialRecognition_Gender_name, int32(x))
}

func (FacialRecognition_Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{3, 0}
}

// Emotions available for recognition.
type FacialRecognition_Emotion int32

const (
	FacialRecognition_ANGRY     FacialRecognition_Emotion = 0
	FacialRecognition_DISGUST   FacialRecognition_Emotion = 1
	FacialRecognition_CONFUSED  FacialRecognition_Emotion = 2
	FacialRecognition_HAPPY     FacialRecognition_Emotion = 3
	FacialRecognition_SAD       FacialRecognition_Emotion = 4
	FacialRecognition_SURPRISED FacialRecognition_Emotion = 5
	FacialRecognition_CALM      FacialRecognition_Emotion = 6
	// Feb 9 2018
	FacialRecognition_FEAR    FacialRecognition_Emotion = 7
	FacialRecognition_NEUTRAL FacialRecognition_Emotion = 8
)

var FacialRecognition_Emotion_name = map[int32]string{
	0: "ANGRY",
	1: "DISGUST",
	2: "CONFUSED",
	3: "HAPPY",
	4: "SAD",
	5: "SURPRISED",
	6: "CALM",
	7: "FEAR",
	8: "NEUTRAL",
}

var FacialRecognition_Emotion_value = map[string]int32{
	"ANGRY":     0,
	"DISGUST":   1,
	"CONFUSED":  2,
	"HAPPY":     3,
	"SAD":       4,
	"SURPRISED": 5,
	"CALM":      6,
	"FEAR":      7,
	"NEUTRAL":   8,
}

func (x FacialRecognition_Emotion) String() string {
	return proto.EnumName(FacialRecognition_Emotion_name, int32(x))
}

func (FacialRecognition_Emotion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{3, 1}
}

// Basic point.
type Point struct {
	// X coordinate.
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// Y coordinate.
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Size struct {
	// Width (x).
	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// Height (y).
	Height               int32    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Size) Reset()         { *m = Size{} }
func (m *Size) String() string { return proto.CompactTextString(m) }
func (*Size) ProtoMessage()    {}
func (*Size) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{1}
}

func (m *Size) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Size.Unmarshal(m, b)
}
func (m *Size) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Size.Marshal(b, m, deterministic)
}
func (m *Size) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Size.Merge(m, src)
}
func (m *Size) XXX_Size() int {
	return xxx_messageInfo_Size.Size(m)
}
func (m *Size) XXX_DiscardUnknown() {
	xxx_messageInfo_Size.DiscardUnknown(m)
}

var xxx_messageInfo_Size proto.InternalMessageInfo

func (m *Size) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Size) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Basic rectangle. Coordinates are float so that we can return relative
// coordinates when needed.
type Rectangle struct {
	// Starting X coordinate.
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// Starting Y coordinate.
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	// Width.
	Width float32 `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	// Height.
	Height               float32  `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rectangle) Reset()         { *m = Rectangle{} }
func (m *Rectangle) String() string { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()    {}
func (*Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{2}
}

func (m *Rectangle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangle.Unmarshal(m, b)
}
func (m *Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangle.Marshal(b, m, deterministic)
}
func (m *Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangle.Merge(m, src)
}
func (m *Rectangle) XXX_Size() int {
	return xxx_messageInfo_Rectangle.Size(m)
}
func (m *Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangle proto.InternalMessageInfo

func (m *Rectangle) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Rectangle) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Rectangle) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Rectangle) GetHeight() float32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type FacialRecognition struct {
	// What was recognized in the image?
	Tag EnumFacialRecognitionTag `protobuf:"varint,1,opt,name=tag,proto3,enum=matrix_io.vision.v1.EnumFacialRecognitionTag" json:"tag,omitempty"`
	// Confidence of the recognition.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// TODO(nelson.castillo, vision.team): How are we going to represent age?
	// It should be a range.
	Age int32 `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	// Detected gender.
	Gender FacialRecognition_Gender `protobuf:"varint,4,opt,name=gender,proto3,enum=matrix_io.vision.v1.FacialRecognition_Gender" json:"gender,omitempty"`
	// Detected emotion.
	Emotion FacialRecognition_Emotion `protobuf:"varint,5,opt,name=emotion,proto3,enum=matrix_io.vision.v1.FacialRecognition_Emotion" json:"emotion,omitempty"`
	// Face descriptor. Setting packed=true because of a
	// protobufjs 5.1 bug. packed=true is the default for proto3 syntax.
	FaceDescriptor []float32 `protobuf:"fixed32,6,rep,packed,name=face_descriptor,json=faceDescriptor,proto3" json:"face_descriptor,omitempty"`
	// Face identification. A string, used to identify a face.
	FaceId string `protobuf:"bytes,7,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
	// Face yaw.
	PoseYaw float32 `protobuf:"fixed32,8,opt,name=pose_yaw,json=poseYaw,proto3" json:"pose_yaw,omitempty"`
	// Race roll.
	PoseRoll float32 `protobuf:"fixed32,9,opt,name=pose_roll,json=poseRoll,proto3" json:"pose_roll,omitempty"`
	// Face pitch.
	PosePitch float32 `protobuf:"fixed32,10,opt,name=pose_pitch,json=posePitch,proto3" json:"pose_pitch,omitempty"`
	//  Basic features for the face.
	BasicFeature *FacialRecognition_BasicFaceFeature `protobuf:"bytes,11,opt,name=basic_feature,json=basicFeature,proto3" json:"basic_feature,omitempty"`
	// Result of is_face classifier
	IsFace               bool     `protobuf:"varint,12,opt,name=is_face,json=isFace,proto3" json:"is_face,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FacialRecognition) Reset()         { *m = FacialRecognition{} }
func (m *FacialRecognition) String() string { return proto.CompactTextString(m) }
func (*FacialRecognition) ProtoMessage()    {}
func (*FacialRecognition) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{3}
}

func (m *FacialRecognition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FacialRecognition.Unmarshal(m, b)
}
func (m *FacialRecognition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FacialRecognition.Marshal(b, m, deterministic)
}
func (m *FacialRecognition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FacialRecognition.Merge(m, src)
}
func (m *FacialRecognition) XXX_Size() int {
	return xxx_messageInfo_FacialRecognition.Size(m)
}
func (m *FacialRecognition) XXX_DiscardUnknown() {
	xxx_messageInfo_FacialRecognition.DiscardUnknown(m)
}

var xxx_messageInfo_FacialRecognition proto.InternalMessageInfo

func (m *FacialRecognition) GetTag() EnumFacialRecognitionTag {
	if m != nil {
		return m.Tag
	}
	return EnumFacialRecognitionTag_AGE
}

func (m *FacialRecognition) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *FacialRecognition) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *FacialRecognition) GetGender() FacialRecognition_Gender {
	if m != nil {
		return m.Gender
	}
	return FacialRecognition_MALE
}

func (m *FacialRecognition) GetEmotion() FacialRecognition_Emotion {
	if m != nil {
		return m.Emotion
	}
	return FacialRecognition_ANGRY
}

func (m *FacialRecognition) GetFaceDescriptor() []float32 {
	if m != nil {
		return m.FaceDescriptor
	}
	return nil
}

func (m *FacialRecognition) GetFaceId() string {
	if m != nil {
		return m.FaceId
	}
	return ""
}

func (m *FacialRecognition) GetPoseYaw() float32 {
	if m != nil {
		return m.PoseYaw
	}
	return 0
}

func (m *FacialRecognition) GetPoseRoll() float32 {
	if m != nil {
		return m.PoseRoll
	}
	return 0
}

func (m *FacialRecognition) GetPosePitch() float32 {
	if m != nil {
		return m.PosePitch
	}
	return 0
}

func (m *FacialRecognition) GetBasicFeature() *FacialRecognition_BasicFaceFeature {
	if m != nil {
		return m.BasicFeature
	}
	return nil
}

func (m *FacialRecognition) GetIsFace() bool {
	if m != nil {
		return m.IsFace
	}
	return false
}

// The following fields should only be present when the tag HAS_FACE_FEATURES is set.
// TODO(carlos.gonzalez, nelson.castillo): Improve the features.
//   Leaving "BasicFaceFeature" for now but this needs to be improved.
type FacialRecognition_BasicFaceFeature struct {
	Mouth                []*Point `protobuf:"bytes,1,rep,name=mouth,proto3" json:"mouth,omitempty"`
	LeftEye              []*Point `protobuf:"bytes,2,rep,name=left_eye,json=leftEye,proto3" json:"left_eye,omitempty"`
	RightEye             []*Point `protobuf:"bytes,3,rep,name=right_eye,json=rightEye,proto3" json:"right_eye,omitempty"`
	Nose                 []*Point `protobuf:"bytes,4,rep,name=nose,proto3" json:"nose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FacialRecognition_BasicFaceFeature) Reset()         { *m = FacialRecognition_BasicFaceFeature{} }
func (m *FacialRecognition_BasicFaceFeature) String() string { return proto.CompactTextString(m) }
func (*FacialRecognition_BasicFaceFeature) ProtoMessage()    {}
func (*FacialRecognition_BasicFaceFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{3, 0}
}

func (m *FacialRecognition_BasicFaceFeature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FacialRecognition_BasicFaceFeature.Unmarshal(m, b)
}
func (m *FacialRecognition_BasicFaceFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FacialRecognition_BasicFaceFeature.Marshal(b, m, deterministic)
}
func (m *FacialRecognition_BasicFaceFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FacialRecognition_BasicFaceFeature.Merge(m, src)
}
func (m *FacialRecognition_BasicFaceFeature) XXX_Size() int {
	return xxx_messageInfo_FacialRecognition_BasicFaceFeature.Size(m)
}
func (m *FacialRecognition_BasicFaceFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_FacialRecognition_BasicFaceFeature.DiscardUnknown(m)
}

var xxx_messageInfo_FacialRecognition_BasicFaceFeature proto.InternalMessageInfo

func (m *FacialRecognition_BasicFaceFeature) GetMouth() []*Point {
	if m != nil {
		return m.Mouth
	}
	return nil
}

func (m *FacialRecognition_BasicFaceFeature) GetLeftEye() []*Point {
	if m != nil {
		return m.LeftEye
	}
	return nil
}

func (m *FacialRecognition_BasicFaceFeature) GetRightEye() []*Point {
	if m != nil {
		return m.RightEye
	}
	return nil
}

func (m *FacialRecognition_BasicFaceFeature) GetNose() []*Point {
	if m != nil {
		return m.Nose
	}
	return nil
}

type ZoneConfig struct {
	// Zone name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// First point for the zone. The "FORWARD" direction of a zone is
	// at 90° to the right of the line formed by B->A.
	PointA *Point `protobuf:"bytes,2,opt,name=point_a,json=pointA,proto3" json:"point_a,omitempty"`
	// Second point of the zone.
	PointB *Point `protobuf:"bytes,3,opt,name=point_b,json=pointB,proto3" json:"point_b,omitempty"`
	// Total height of the zone. In pixels.
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// Total heigt in meters. It should be in meters.
	RealHeight           float32  `protobuf:"fixed32,5,opt,name=real_height,json=realHeight,proto3" json:"real_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZoneConfig) Reset()         { *m = ZoneConfig{} }
func (m *ZoneConfig) String() string { return proto.CompactTextString(m) }
func (*ZoneConfig) ProtoMessage()    {}
func (*ZoneConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{4}
}

func (m *ZoneConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZoneConfig.Unmarshal(m, b)
}
func (m *ZoneConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZoneConfig.Marshal(b, m, deterministic)
}
func (m *ZoneConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneConfig.Merge(m, src)
}
func (m *ZoneConfig) XXX_Size() int {
	return xxx_messageInfo_ZoneConfig.Size(m)
}
func (m *ZoneConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneConfig proto.InternalMessageInfo

func (m *ZoneConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZoneConfig) GetPointA() *Point {
	if m != nil {
		return m.PointA
	}
	return nil
}

func (m *ZoneConfig) GetPointB() *Point {
	if m != nil {
		return m.PointB
	}
	return nil
}

func (m *ZoneConfig) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ZoneConfig) GetRealHeight() float32 {
	if m != nil {
		return m.RealHeight
	}
	return 0
}

type AreaConfig struct {
	// Area name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Points of the area. At least 3 different points.
	Point []*Point `protobuf:"bytes,2,rep,name=point,proto3" json:"point,omitempty"`
	// Count direction. The (x,y) direction vector that will be used to
	// determine whether the object should be counted when leaving the area.
	CountDirection       *Point   `protobuf:"bytes,3,opt,name=count_direction,json=countDirection,proto3" json:"count_direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AreaConfig) Reset()         { *m = AreaConfig{} }
func (m *AreaConfig) String() string { return proto.CompactTextString(m) }
func (*AreaConfig) ProtoMessage()    {}
func (*AreaConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{5}
}

func (m *AreaConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AreaConfig.Unmarshal(m, b)
}
func (m *AreaConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AreaConfig.Marshal(b, m, deterministic)
}
func (m *AreaConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AreaConfig.Merge(m, src)
}
func (m *AreaConfig) XXX_Size() int {
	return xxx_messageInfo_AreaConfig.Size(m)
}
func (m *AreaConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AreaConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AreaConfig proto.InternalMessageInfo

func (m *AreaConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AreaConfig) GetPoint() []*Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *AreaConfig) GetCountDirection() *Point {
	if m != nil {
		return m.CountDirection
	}
	return nil
}

type AreaAndZoneConfig struct {
	// Areas for counting.
	Area []*AreaConfig `protobuf:"bytes,1,rep,name=area,proto3" json:"area,omitempty"`
	// Zones for counting.
	Zone []*ZoneConfig `protobuf:"bytes,2,rep,name=zone,proto3" json:"zone,omitempty"`
	// Region of interest, where to detect.
	RegionOfInterest     []*Rectangle `protobuf:"bytes,3,rep,name=region_of_interest,json=regionOfInterest,proto3" json:"region_of_interest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AreaAndZoneConfig) Reset()         { *m = AreaAndZoneConfig{} }
func (m *AreaAndZoneConfig) String() string { return proto.CompactTextString(m) }
func (*AreaAndZoneConfig) ProtoMessage()    {}
func (*AreaAndZoneConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{6}
}

func (m *AreaAndZoneConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AreaAndZoneConfig.Unmarshal(m, b)
}
func (m *AreaAndZoneConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AreaAndZoneConfig.Marshal(b, m, deterministic)
}
func (m *AreaAndZoneConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AreaAndZoneConfig.Merge(m, src)
}
func (m *AreaAndZoneConfig) XXX_Size() int {
	return xxx_messageInfo_AreaAndZoneConfig.Size(m)
}
func (m *AreaAndZoneConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AreaAndZoneConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AreaAndZoneConfig proto.InternalMessageInfo

func (m *AreaAndZoneConfig) GetArea() []*AreaConfig {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *AreaAndZoneConfig) GetZone() []*ZoneConfig {
	if m != nil {
		return m.Zone
	}
	return nil
}

func (m *AreaAndZoneConfig) GetRegionOfInterest() []*Rectangle {
	if m != nil {
		return m.RegionOfInterest
	}
	return nil
}

type VehicleConfig struct {
	// Camera URL.
	CameraUrl string `protobuf:"bytes,1,opt,name=camera_url,json=cameraUrl,proto3" json:"camera_url,omitempty"`
	// Areas and zones.
	AreaAndZone          *AreaAndZoneConfig `protobuf:"bytes,2,opt,name=area_and_zone,json=areaAndZone,proto3" json:"area_and_zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VehicleConfig) Reset()         { *m = VehicleConfig{} }
func (m *VehicleConfig) String() string { return proto.CompactTextString(m) }
func (*VehicleConfig) ProtoMessage()    {}
func (*VehicleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{7}
}

func (m *VehicleConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VehicleConfig.Unmarshal(m, b)
}
func (m *VehicleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VehicleConfig.Marshal(b, m, deterministic)
}
func (m *VehicleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VehicleConfig.Merge(m, src)
}
func (m *VehicleConfig) XXX_Size() int {
	return xxx_messageInfo_VehicleConfig.Size(m)
}
func (m *VehicleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_VehicleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_VehicleConfig proto.InternalMessageInfo

func (m *VehicleConfig) GetCameraUrl() string {
	if m != nil {
		return m.CameraUrl
	}
	return ""
}

func (m *VehicleConfig) GetAreaAndZone() *AreaAndZoneConfig {
	if m != nil {
		return m.AreaAndZone
	}
	return nil
}

type VisionEvent struct {
	// Tag for events. The fields below will make sense for a specific tag.
	Tag EventTag `protobuf:"varint,1,opt,name=tag,proto3,enum=matrix_io.vision.v1.EventTag" json:"tag,omitempty"`
	// Object identifier.
	TrackingId uint64 `protobuf:"varint,2,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	// Session time: Amount of seconds in tracker
	// Used by TRACKING_END, AREA_EXIT and ZONE_EXIT.
	SessionTime float32 `protobuf:"fixed32,3,opt,name=session_time,json=sessionTime,proto3" json:"session_time,omitempty"`
	// Dwell time: Amount of seconds facing the camera. Used for TRACKING_END event.
	// In seconds.
	DwellTime float32 `protobuf:"fixed32,4,opt,name=dwell_time,json=dwellTime,proto3" json:"dwell_time,omitempty"`
	// Area identifier. Used when AREA_ENTER or AREA_EXIT is set.
	AreaId uint64 `protobuf:"varint,5,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	// Zone identifier. Used when ZONE_ENTER or ZONE_EXIT is set.
	ZoneId uint64 `protobuf:"varint,6,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Direction of the object that leaves the zone.
	// Used when ZONE_ENTER or ZONE_EXIT is set.
	ZoneDirection ZoneDirection `protobuf:"varint,7,opt,name=zone_direction,json=zoneDirection,proto3,enum=matrix_io.vision.v1.ZoneDirection" json:"zone_direction,omitempty"`
	// Speed of the object. Usually relative to the zone.
	Speed float32 `protobuf:"fixed32,8,opt,name=speed,proto3" json:"speed,omitempty"`
	// Vision event UTC timestamp (seconds and nanos)
	// see google/protobuf/timestamp.proto
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VisionEvent) Reset()         { *m = VisionEvent{} }
func (m *VisionEvent) String() string { return proto.CompactTextString(m) }
func (*VisionEvent) ProtoMessage()    {}
func (*VisionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{8}
}

func (m *VisionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VisionEvent.Unmarshal(m, b)
}
func (m *VisionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VisionEvent.Marshal(b, m, deterministic)
}
func (m *VisionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VisionEvent.Merge(m, src)
}
func (m *VisionEvent) XXX_Size() int {
	return xxx_messageInfo_VisionEvent.Size(m)
}
func (m *VisionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_VisionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_VisionEvent proto.InternalMessageInfo

func (m *VisionEvent) GetTag() EventTag {
	if m != nil {
		return m.Tag
	}
	return EventTag_TRACKING_START
}

func (m *VisionEvent) GetTrackingId() uint64 {
	if m != nil {
		return m.TrackingId
	}
	return 0
}

func (m *VisionEvent) GetSessionTime() float32 {
	if m != nil {
		return m.SessionTime
	}
	return 0
}

func (m *VisionEvent) GetDwellTime() float32 {
	if m != nil {
		return m.DwellTime
	}
	return 0
}

func (m *VisionEvent) GetAreaId() uint64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *VisionEvent) GetZoneId() uint64 {
	if m != nil {
		return m.ZoneId
	}
	return 0
}

func (m *VisionEvent) GetZoneDirection() ZoneDirection {
	if m != nil {
		return m.ZoneDirection
	}
	return ZoneDirection_UNKNOWN
}

func (m *VisionEvent) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *VisionEvent) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type VehicleRecognition struct {
	// Type of vehicle: van, motorcyle, etc.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Brand of car: Toyota, Tesla, etc.
	Brand string `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`
	// Model of the car: Corolla, S, etc.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Year of release.
	Year                 int32    `protobuf:"varint,4,opt,name=year,proto3" json:"year,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VehicleRecognition) Reset()         { *m = VehicleRecognition{} }
func (m *VehicleRecognition) String() string { return proto.CompactTextString(m) }
func (*VehicleRecognition) ProtoMessage()    {}
func (*VehicleRecognition) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{9}
}

func (m *VehicleRecognition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VehicleRecognition.Unmarshal(m, b)
}
func (m *VehicleRecognition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VehicleRecognition.Marshal(b, m, deterministic)
}
func (m *VehicleRecognition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VehicleRecognition.Merge(m, src)
}
func (m *VehicleRecognition) XXX_Size() int {
	return xxx_messageInfo_VehicleRecognition.Size(m)
}
func (m *VehicleRecognition) XXX_DiscardUnknown() {
	xxx_messageInfo_VehicleRecognition.DiscardUnknown(m)
}

var xxx_messageInfo_VehicleRecognition proto.InternalMessageInfo

func (m *VehicleRecognition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VehicleRecognition) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *VehicleRecognition) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *VehicleRecognition) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

// Result of a rectangle detector.
type RectangularDetection struct {
	// The algorithm used in this detection.
	Algorithm EnumDetectionAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=matrix_io.vision.v1.EnumDetectionAlgorithm" json:"algorithm,omitempty"`
	// Location of the detection. Starting at top-left.
	Location *Rectangle `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// What kind of detections the rectangle contains.
	Tag EnumDetectionTag `protobuf:"varint,3,opt,name=tag,proto3,enum=matrix_io.vision.v1.EnumDetectionTag" json:"tag,omitempty"`
	// Detection confidence.
	Confidence float32 `protobuf:"fixed32,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// Facial recognitions for this detection (age, gender, pose, features, etc).
	FacialRecognition []*FacialRecognition `protobuf:"bytes,5,rep,name=facial_recognition,json=facialRecognition,proto3" json:"facial_recognition,omitempty"`
	// Vehicle recognition for this detection. In most cases you will only
	// get one recognition but we leave room for more than one.
	// This can happen because some cars can have more than type or because
	// we decide to output more than one classifier output.
	VehicleRecognition []*VehicleRecognition `protobuf:"bytes,9,rep,name=vehicle_recognition,json=vehicleRecognition,proto3" json:"vehicle_recognition,omitempty"`
	// Speed of the object being detected / tracked.
	// Please use meters per second as the unit.
	Speed float32 `protobuf:"fixed32,10,opt,name=speed,proto3" json:"speed,omitempty"`
	// Image snippet of the rectangle taken from the original image where the
	// detection took place.
	Image []byte `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// Image snippet of the rectangle taken from the original image where the
	// detection took place. This image is expected to be smaller than
	// "image".
	ImageSmall []byte `protobuf:"bytes,7,opt,name=image_small,json=imageSmall,proto3" json:"image_small,omitempty"`
	// Tracking id for this detection.
	TrackingId uint64 `protobuf:"varint,8,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	// UUID (v4) identifies this unique rectangular detection
	Uuid                 string   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RectangularDetection) Reset()         { *m = RectangularDetection{} }
func (m *RectangularDetection) String() string { return proto.CompactTextString(m) }
func (*RectangularDetection) ProtoMessage()    {}
func (*RectangularDetection) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{10}
}

func (m *RectangularDetection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RectangularDetection.Unmarshal(m, b)
}
func (m *RectangularDetection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RectangularDetection.Marshal(b, m, deterministic)
}
func (m *RectangularDetection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RectangularDetection.Merge(m, src)
}
func (m *RectangularDetection) XXX_Size() int {
	return xxx_messageInfo_RectangularDetection.Size(m)
}
func (m *RectangularDetection) XXX_DiscardUnknown() {
	xxx_messageInfo_RectangularDetection.DiscardUnknown(m)
}

var xxx_messageInfo_RectangularDetection proto.InternalMessageInfo

func (m *RectangularDetection) GetAlgorithm() EnumDetectionAlgorithm {
	if m != nil {
		return m.Algorithm
	}
	return EnumDetectionAlgorithm_DEFAULT
}

func (m *RectangularDetection) GetLocation() *Rectangle {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RectangularDetection) GetTag() EnumDetectionTag {
	if m != nil {
		return m.Tag
	}
	return EnumDetectionTag_FACE
}

func (m *RectangularDetection) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *RectangularDetection) GetFacialRecognition() []*FacialRecognition {
	if m != nil {
		return m.FacialRecognition
	}
	return nil
}

func (m *RectangularDetection) GetVehicleRecognition() []*VehicleRecognition {
	if m != nil {
		return m.VehicleRecognition
	}
	return nil
}

func (m *RectangularDetection) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *RectangularDetection) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *RectangularDetection) GetImageSmall() []byte {
	if m != nil {
		return m.ImageSmall
	}
	return nil
}

func (m *RectangularDetection) GetTrackingId() uint64 {
	if m != nil {
		return m.TrackingId
	}
	return 0
}

func (m *RectangularDetection) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

// Collection of images. For some applications the
// order can be important for others doesn't.
type ImageList struct {
	// Image data
	ImageData [][]byte `protobuf:"bytes,1,rep,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	// If image data above was taken in a sequence, the frame rate
	// at which images were taken
	FramesPerSecond      int32    `protobuf:"varint,2,opt,name=frames_per_second,json=framesPerSecond,proto3" json:"frames_per_second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageList) Reset()         { *m = ImageList{} }
func (m *ImageList) String() string { return proto.CompactTextString(m) }
func (*ImageList) ProtoMessage()    {}
func (*ImageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{11}
}

func (m *ImageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageList.Unmarshal(m, b)
}
func (m *ImageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageList.Marshal(b, m, deterministic)
}
func (m *ImageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageList.Merge(m, src)
}
func (m *ImageList) XXX_Size() int {
	return xxx_messageInfo_ImageList.Size(m)
}
func (m *ImageList) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageList.DiscardUnknown(m)
}

var xxx_messageInfo_ImageList proto.InternalMessageInfo

func (m *ImageList) GetImageData() [][]byte {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func (m *ImageList) GetFramesPerSecond() int32 {
	if m != nil {
		return m.FramesPerSecond
	}
	return 0
}

// Source video
type Video struct {
	// RGB video data
	VideoData []byte `protobuf:"bytes,1,opt,name=video_data,json=videoData,proto3" json:"video_data,omitempty"`
	// Video codec used to encode data
	Codec EnumVideoCodec `protobuf:"varint,2,opt,name=codec,proto3,enum=matrix_io.vision.v1.EnumVideoCodec" json:"codec,omitempty"`
	// Arbitrary text to tag video content
	// ie. tagging for training purposes
	Tag                  []string `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{12}
}

func (m *Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Video.Unmarshal(m, b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Video.Marshal(b, m, deterministic)
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return xxx_messageInfo_Video.Size(m)
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetVideoData() []byte {
	if m != nil {
		return m.VideoData
	}
	return nil
}

func (m *Video) GetCodec() EnumVideoCodec {
	if m != nil {
		return m.Codec
	}
	return EnumVideoCodec_UNDEFINED_VIDEO_CODEC
}

func (m *Video) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

type Image struct {
	// Image data.
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Image format.
	Format ImageFormat `protobuf:"varint,2,opt,name=format,proto3,enum=matrix_io.vision.v1.ImageFormat" json:"format,omitempty"`
	// Image size.
	Size                 *Size    `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{13}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Image) GetFormat() ImageFormat {
	if m != nil {
		return m.Format
	}
	return ImageFormat_UNSPECIFIED
}

func (m *Image) GetSize() *Size {
	if m != nil {
		return m.Size
	}
	return nil
}

// This message organizes (at least) four components:
// - Detections (faces, hands, cars).
// - Tracking information.
// - Recognition (gender, age, emotion).
//  -Events (New face in video, face leaves video, gesture starts).
type VisionResult struct {
	// Results of all the rectangular detectors.
	// Each detecion also stores the recognitions that can be done inside of this
	// rectangle. For instance, for faces the available recognitions are
	// (age, gender, emotion).
	RectDetection []*RectangularDetection `protobuf:"bytes,1,rep,name=rect_detection,json=rectDetection,proto3" json:"rect_detection,omitempty"`
	// Vision events. For instance, tracking events (start, end).
	// This message is not inside rect_detection because some events will happen when the
	// detection is no longer available, for instance: TRACKING_END.
	VisionEvent []*VisionEvent `protobuf:"bytes,4,rep,name=vision_event,json=visionEvent,proto3" json:"vision_event,omitempty"`
	// Source image for the detection. It is mostly useful when you need to keep
	// the source image that was used to generating the detection when you want to
	// evaluate algorithmic changes (test different versions of the same
	// algorithm) or compare different detection algorithms. It is also useful if you want to
	// augment an image with detection results (but not very efficient for this case).
	ResultImage *Image `protobuf:"bytes,5,opt,name=result_image,json=resultImage,proto3" json:"result_image,omitempty"`
	// Same as above but with a resolution that is expected to have less details,
	// i.e.: 640x480 instead of 3840x2160. It could be useful to give the client an idea
	ResultImageSmall *Image `protobuf:"bytes,6,opt,name=result_image_small,json=resultImageSmall,proto3" json:"result_image_small,omitempty"`
	// Deprecated by result_image.
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Deprecated by result_image_small.
	ImageSmall []byte `protobuf:"bytes,3,opt,name=image_small,json=imageSmall,proto3" json:"image_small,omitempty"`
	// UUID (v4) that uniquely identifies each vision result
	Uuid                 string   `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VisionResult) Reset()         { *m = VisionResult{} }
func (m *VisionResult) String() string { return proto.CompactTextString(m) }
func (*VisionResult) ProtoMessage()    {}
func (*VisionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f917d166c6bb10b, []int{14}
}

func (m *VisionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VisionResult.Unmarshal(m, b)
}
func (m *VisionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VisionResult.Marshal(b, m, deterministic)
}
func (m *VisionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VisionResult.Merge(m, src)
}
func (m *VisionResult) XXX_Size() int {
	return xxx_messageInfo_VisionResult.Size(m)
}
func (m *VisionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VisionResult.DiscardUnknown(m)
}

var xxx_messageInfo_VisionResult proto.InternalMessageInfo

func (m *VisionResult) GetRectDetection() []*RectangularDetection {
	if m != nil {
		return m.RectDetection
	}
	return nil
}

func (m *VisionResult) GetVisionEvent() []*VisionEvent {
	if m != nil {
		return m.VisionEvent
	}
	return nil
}

func (m *VisionResult) GetResultImage() *Image {
	if m != nil {
		return m.ResultImage
	}
	return nil
}

func (m *VisionResult) GetResultImageSmall() *Image {
	if m != nil {
		return m.ResultImageSmall
	}
	return nil
}

func (m *VisionResult) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *VisionResult) GetImageSmall() []byte {
	if m != nil {
		return m.ImageSmall
	}
	return nil
}

func (m *VisionResult) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterEnum("matrix_io.vision.v1.EnumFacialRecognitionTag", EnumFacialRecognitionTag_name, EnumFacialRecognitionTag_value)
	proto.RegisterEnum("matrix_io.vision.v1.ZoneDirection", ZoneDirection_name, ZoneDirection_value)
	proto.RegisterEnum("matrix_io.vision.v1.EventTag", EventTag_name, EventTag_value)
	proto.RegisterEnum("matrix_io.vision.v1.EnumDetectionTag", EnumDetectionTag_name, EnumDetectionTag_value)
	proto.RegisterEnum("matrix_io.vision.v1.EnumDetectionAlgorithm", EnumDetectionAlgorithm_name, EnumDetectionAlgorithm_value)
	proto.RegisterEnum("matrix_io.vision.v1.EnumVideoCodec", EnumVideoCodec_name, EnumVideoCodec_value)
	proto.RegisterEnum("matrix_io.vision.v1.ImageFormat", ImageFormat_name, ImageFormat_value)
	proto.RegisterEnum("matrix_io.vision.v1.FacialRecognition_Gender", FacialRecognition_Gender_name, FacialRecognition_Gender_value)
	proto.RegisterEnum("matrix_io.vision.v1.FacialRecognition_Emotion", FacialRecognition_Emotion_name, FacialRecognition_Emotion_value)
	proto.RegisterType((*Point)(nil), "matrix_io.vision.v1.Point")
	proto.RegisterType((*Size)(nil), "matrix_io.vision.v1.Size")
	proto.RegisterType((*Rectangle)(nil), "matrix_io.vision.v1.Rectangle")
	proto.RegisterType((*FacialRecognition)(nil), "matrix_io.vision.v1.FacialRecognition")
	proto.RegisterType((*FacialRecognition_BasicFaceFeature)(nil), "matrix_io.vision.v1.FacialRecognition.BasicFaceFeature")
	proto.RegisterType((*ZoneConfig)(nil), "matrix_io.vision.v1.ZoneConfig")
	proto.RegisterType((*AreaConfig)(nil), "matrix_io.vision.v1.AreaConfig")
	proto.RegisterType((*AreaAndZoneConfig)(nil), "matrix_io.vision.v1.AreaAndZoneConfig")
	proto.RegisterType((*VehicleConfig)(nil), "matrix_io.vision.v1.VehicleConfig")
	proto.RegisterType((*VisionEvent)(nil), "matrix_io.vision.v1.VisionEvent")
	proto.RegisterType((*VehicleRecognition)(nil), "matrix_io.vision.v1.VehicleRecognition")
	proto.RegisterType((*RectangularDetection)(nil), "matrix_io.vision.v1.RectangularDetection")
	proto.RegisterType((*ImageList)(nil), "matrix_io.vision.v1.ImageList")
	proto.RegisterType((*Video)(nil), "matrix_io.vision.v1.Video")
	proto.RegisterType((*Image)(nil), "matrix_io.vision.v1.Image")
	proto.RegisterType((*VisionResult)(nil), "matrix_io.vision.v1.VisionResult")
}

func init() { proto.RegisterFile("matrix_io/vision/v1/vision.proto", fileDescriptor_9f917d166c6bb10b) }

var fileDescriptor_9f917d166c6bb10b = []byte{
	// 1895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xcd, 0x72, 0xdb, 0xc8,
	0x11, 0x36, 0x48, 0x82, 0x24, 0x9a, 0x94, 0x04, 0x8d, 0xbd, 0xbb, 0xb4, 0x13, 0xdb, 0x0a, 0xb7,
	0xb2, 0xd1, 0x6a, 0x6b, 0xa9, 0xb5, 0xec, 0xc4, 0xde, 0x54, 0x52, 0x29, 0x88, 0x04, 0x25, 0xc4,
	0x12, 0xc9, 0x0c, 0x7f, 0x76, 0xed, 0xa4, 0x0a, 0x05, 0x11, 0x43, 0x0a, 0x15, 0x10, 0x50, 0x01,
	0xa0, 0x6c, 0xe9, 0x01, 0x72, 0xcb, 0x39, 0x8f, 0x90, 0x4a, 0x5e, 0x23, 0xc7, 0xbc, 0x46, 0xce,
	0xb9, 0xe7, 0x96, 0xea, 0x1e, 0xf0, 0x47, 0x16, 0xf5, 0x73, 0x9b, 0xfe, 0xf9, 0x7a, 0xba, 0x1b,
	0xdd, 0xd3, 0x0d, 0xd8, 0x9a, 0x38, 0x49, 0xe4, 0x7d, 0xb4, 0xbd, 0x70, 0xf7, 0xdc, 0x8b, 0xbd,
	0x30, 0xd8, 0x3d, 0x7f, 0x91, 0x9e, 0x6a, 0x67, 0x51, 0x98, 0x84, 0xec, 0xe1, 0x5c, 0xa3, 0x96,
	0xf2, 0xcf, 0x5f, 0x3c, 0x79, 0x3e, 0x0e, 0xc3, 0xb1, 0x2f, 0x76, 0x49, 0xe5, 0x64, 0x3a, 0xda,
	0x4d, 0xbc, 0x89, 0x88, 0x13, 0x67, 0x72, 0x26, 0x51, 0xd5, 0x2f, 0x41, 0xed, 0x84, 0x5e, 0x90,
	0xb0, 0x32, 0x28, 0x1f, 0x2b, 0xca, 0x96, 0xb2, 0x9d, 0xe1, 0xca, 0x47, 0xa4, 0x2e, 0x2a, 0x19,
	0x49, 0x5d, 0x54, 0x5f, 0x41, 0xae, 0xeb, 0x5d, 0x0a, 0xf6, 0x08, 0xd4, 0x0f, 0x9e, 0x9b, 0x9c,
	0x92, 0x9e, 0xca, 0x25, 0xc1, 0x3e, 0x87, 0xfc, 0xa9, 0xf0, 0xc6, 0xa7, 0x09, 0x01, 0x54, 0x9e,
	0x52, 0xd5, 0x3e, 0x68, 0x5c, 0x0c, 0x13, 0x27, 0x18, 0xfb, 0xe2, 0x36, 0xf3, 0x0b, 0xb3, 0x59,
	0xe2, 0x5c, 0x33, 0x9b, 0x23, 0xf6, 0xcc, 0xec, 0xdf, 0x0b, 0xb0, 0xd9, 0x74, 0x86, 0x9e, 0xe3,
	0x73, 0x31, 0x0c, 0xc7, 0x81, 0x97, 0x78, 0x61, 0xc0, 0x7e, 0x07, 0xd9, 0xc4, 0x19, 0xd3, 0x0d,
	0xeb, 0x7b, 0xdf, 0xd6, 0x56, 0xe4, 0xa2, 0x66, 0x06, 0xd3, 0xc9, 0x35, 0x60, 0xcf, 0x19, 0x73,
	0x44, 0xb2, 0x67, 0x00, 0xc3, 0x30, 0x18, 0x79, 0xae, 0x08, 0x86, 0x22, 0xf5, 0x6d, 0x89, 0xc3,
	0x74, 0xc8, 0x3a, 0x63, 0x41, 0x2e, 0xaa, 0x1c, 0x8f, 0xcc, 0x84, 0xfc, 0x58, 0x04, 0xae, 0x88,
	0xc8, 0xc1, 0x9b, 0x6e, 0xbd, 0x76, 0x63, 0xed, 0x80, 0x40, 0x3c, 0x05, 0xb3, 0x43, 0x28, 0x88,
	0x49, 0x88, 0x92, 0x8a, 0x4a, 0x76, 0x6a, 0xf7, 0xb4, 0x63, 0x4a, 0x14, 0x9f, 0xc1, 0xd9, 0x37,
	0xb0, 0x31, 0x72, 0x86, 0xc2, 0x76, 0x45, 0x3c, 0x8c, 0xbc, 0xb3, 0x24, 0x8c, 0x2a, 0xf9, 0xad,
	0xec, 0x76, 0x66, 0x3f, 0xa3, 0x2b, 0x7c, 0x1d, 0x45, 0x8d, 0xb9, 0x84, 0x7d, 0x01, 0x05, 0x52,
	0xf6, 0xdc, 0x4a, 0x61, 0x4b, 0xd9, 0xd6, 0x78, 0x1e, 0x49, 0xcb, 0x65, 0x8f, 0xa1, 0x78, 0x16,
	0xc6, 0xc2, 0xbe, 0x70, 0x3e, 0x54, 0x8a, 0x94, 0x86, 0x02, 0xd2, 0xef, 0x9c, 0x0f, 0xec, 0x27,
	0xa0, 0x91, 0x28, 0x0a, 0x7d, 0xbf, 0xa2, 0x91, 0x8c, 0x74, 0x79, 0xe8, 0xfb, 0xec, 0x29, 0x00,
	0x09, 0xcf, 0xbc, 0x64, 0x78, 0x5a, 0x01, 0x92, 0x92, 0x7a, 0x07, 0x19, 0xec, 0x4f, 0xb0, 0x76,
	0xe2, 0xc4, 0xde, 0xd0, 0x1e, 0x09, 0x27, 0x99, 0x46, 0xa2, 0x52, 0xda, 0x52, 0xb6, 0x4b, 0x7b,
	0xaf, 0xef, 0x19, 0xec, 0x3e, 0x62, 0x9b, 0xce, 0x50, 0x34, 0x25, 0x9c, 0x97, 0xc9, 0x5a, 0x4a,
	0x61, 0x34, 0x5e, 0x6c, 0x63, 0x04, 0x95, 0xf2, 0x96, 0xb2, 0x5d, 0xe4, 0x79, 0x2f, 0x46, 0xed,
	0x27, 0xff, 0x51, 0x40, 0xff, 0x14, 0xcb, 0xbe, 0x03, 0x75, 0x12, 0x4e, 0xa9, 0x8e, 0xb3, 0xdb,
	0xa5, 0xbd, 0x27, 0x2b, 0x7d, 0xa0, 0xb6, 0xe0, 0x52, 0x91, 0xfd, 0x12, 0x8a, 0xbe, 0x18, 0x25,
	0xb6, 0xb8, 0xc0, 0xda, 0xb8, 0x0b, 0x54, 0x40, 0x5d, 0xf3, 0x42, 0xb0, 0xd7, 0xa0, 0x45, 0x58,
	0xb4, 0x84, 0xcb, 0xde, 0x89, 0x2b, 0x92, 0x32, 0x02, 0x6b, 0x90, 0x0b, 0xc2, 0x58, 0x54, 0x72,
	0x77, 0x62, 0x48, 0xaf, 0xfa, 0x0c, 0xf2, 0xb2, 0xac, 0x58, 0x11, 0x72, 0xc7, 0xc6, 0x91, 0xa9,
	0x3f, 0x60, 0x00, 0xf9, 0xa6, 0x49, 0x67, 0xa5, 0x1a, 0x43, 0x21, 0x2d, 0x17, 0xa6, 0x81, 0x6a,
	0xb4, 0x0e, 0xf8, 0x3b, 0xfd, 0x01, 0x2b, 0x41, 0xa1, 0x61, 0x75, 0x0f, 0xfa, 0xdd, 0x9e, 0xae,
	0xb0, 0x32, 0x14, 0xeb, 0xed, 0x56, 0xb3, 0xdf, 0x35, 0x1b, 0x7a, 0x06, 0xb5, 0x0e, 0x8d, 0x4e,
	0xe7, 0x9d, 0x9e, 0x65, 0x05, 0xc8, 0x76, 0x8d, 0x86, 0x9e, 0x63, 0x6b, 0xa0, 0x75, 0xfb, 0xbc,
	0xc3, 0x2d, 0x54, 0x51, 0xf1, 0xa6, 0xba, 0x71, 0x74, 0xac, 0xe7, 0xf1, 0xd4, 0x34, 0x0d, 0xae,
	0x17, 0xd0, 0x62, 0xcb, 0xec, 0xf7, 0xb8, 0x71, 0xa4, 0x17, 0xab, 0xff, 0x52, 0x00, 0xde, 0x87,
	0x81, 0xa8, 0x63, 0x17, 0x8d, 0x19, 0x83, 0x5c, 0xe0, 0x4c, 0x04, 0xf5, 0xa8, 0xc6, 0xe9, 0xcc,
	0x5e, 0x42, 0xe1, 0x0c, 0xc3, 0xb0, 0x1d, 0x6a, 0xb9, 0xdb, 0x43, 0xcd, 0x93, 0xaa, 0xb1, 0x00,
	0x9d, 0x50, 0x3b, 0xde, 0x07, 0xb4, 0xff, 0xc9, 0x73, 0x32, 0x7f, 0xa5, 0xd8, 0x73, 0x28, 0x45,
	0xc2, 0xf1, 0xed, 0x54, 0xa8, 0xca, 0xc6, 0x47, 0xd6, 0xa1, 0x7c, 0x6f, 0xfe, 0xa6, 0x00, 0x18,
	0x91, 0x70, 0x6e, 0x89, 0xe2, 0x3b, 0x50, 0xe9, 0x96, 0x7b, 0x94, 0x86, 0x54, 0x64, 0x75, 0xd8,
	0x18, 0x86, 0xd3, 0x20, 0xb1, 0x5d, 0x2f, 0x12, 0x43, 0x6a, 0xfe, 0xbb, 0x43, 0x59, 0x27, 0x48,
	0x63, 0x86, 0xa8, 0xfe, 0x5b, 0x81, 0x4d, 0xf4, 0xcc, 0x08, 0xdc, 0xa5, 0x34, 0xbf, 0x84, 0x9c,
	0x13, 0x09, 0x27, 0xad, 0xed, 0xe7, 0x2b, 0xed, 0x2d, 0xe2, 0xe1, 0xa4, 0x8c, 0xa0, 0xcb, 0x30,
	0x98, 0xd5, 0xf6, 0x6a, 0xd0, 0xe2, 0x0e, 0x4e, 0xca, 0xec, 0x08, 0x58, 0x24, 0xc6, 0x5e, 0x18,
	0xd8, 0xe1, 0xc8, 0xf6, 0x82, 0x44, 0x44, 0x22, 0x4e, 0xd2, 0x32, 0x7f, 0xb6, 0xd2, 0xc4, 0x7c,
	0x1e, 0x70, 0x5d, 0x22, 0xdb, 0x23, 0x2b, 0xc5, 0x55, 0x2f, 0x61, 0x6d, 0x20, 0x4e, 0xbd, 0xa1,
	0x3f, 0x0b, 0xe4, 0x29, 0xc0, 0xd0, 0x99, 0x88, 0xc8, 0xb1, 0xa7, 0x91, 0x9f, 0xe6, 0x5b, 0x93,
	0x9c, 0x7e, 0xe4, 0xb3, 0xdf, 0xc3, 0x1a, 0xba, 0x6e, 0x3b, 0x81, 0x6b, 0xa7, 0xbe, 0x63, 0x02,
	0xbf, 0xba, 0x31, 0xe0, 0x2b, 0x69, 0xe2, 0x25, 0x67, 0xc1, 0xaa, 0xfe, 0x37, 0x03, 0xa5, 0x01,
	0x29, 0x9b, 0xe7, 0x22, 0x48, 0xd8, 0xee, 0xf2, 0x34, 0x79, 0xba, 0x7a, 0x9a, 0xa0, 0xe2, 0x7c,
	0x7a, 0x3c, 0x87, 0x52, 0x12, 0x39, 0xc3, 0x3f, 0x7b, 0xc1, 0x18, 0x5f, 0x54, 0x74, 0x25, 0xc7,
	0x61, 0xc6, 0xb2, 0x5c, 0xf6, 0x33, 0x28, 0xc7, 0x22, 0x46, 0xb0, 0x8d, 0x23, 0x38, 0x1d, 0x75,
	0xa5, 0x94, 0xd7, 0xf3, 0x26, 0x02, 0xe3, 0x75, 0x3f, 0x08, 0xdf, 0x97, 0x0a, 0x72, 0xe8, 0x69,
	0xc4, 0x21, 0xf1, 0x17, 0x50, 0xa0, 0x78, 0x3d, 0x97, 0x8a, 0x34, 0xc7, 0xf3, 0x48, 0x5a, 0x2e,
	0x0a, 0x30, 0x7e, 0x14, 0xe4, 0xa5, 0x00, 0x49, 0xcb, 0x65, 0x16, 0xac, 0x93, 0x60, 0x51, 0x63,
	0x05, 0x0a, 0xa8, 0x7a, 0xe3, 0xe7, 0x9d, 0xd7, 0x16, 0x5f, 0xbb, 0x5c, 0x26, 0x71, 0x44, 0xc7,
	0x67, 0x42, 0xb8, 0xe9, 0x44, 0x90, 0x04, 0x7b, 0x03, 0xda, 0x7c, 0x9f, 0xa0, 0x79, 0x80, 0xf5,
	0x2b, 0x37, 0x8e, 0xda, 0x6c, 0xe3, 0xa8, 0xf5, 0x66, 0x1a, 0x7c, 0xa1, 0x5c, 0x3d, 0x05, 0x96,
	0x7e, 0xec, 0xe5, 0x21, 0xce, 0x20, 0x97, 0x5c, 0x9c, 0xcd, 0x7b, 0x0b, 0xcf, 0x78, 0xf3, 0x49,
	0xe4, 0x04, 0x32, 0xa7, 0x1a, 0x97, 0x04, 0x72, 0x27, 0xa1, 0x2b, 0x7c, 0xca, 0xa3, 0xc6, 0x25,
	0x81, 0xf8, 0x0b, 0xe1, 0x44, 0x69, 0x87, 0xd3, 0xb9, 0xfa, 0x8f, 0x1c, 0x3c, 0x4a, 0xcb, 0x6e,
	0xea, 0x3b, 0x51, 0x43, 0x24, 0x69, 0x48, 0x16, 0x68, 0x8e, 0x3f, 0x0e, 0x23, 0x2f, 0x39, 0x9d,
	0xa4, 0x5f, 0xfa, 0x9b, 0x1b, 0xf7, 0x86, 0x39, 0xcc, 0x98, 0x41, 0xf8, 0x02, 0xcd, 0x7e, 0x0d,
	0x45, 0x3f, 0x1c, 0x3a, 0x94, 0x62, 0x59, 0x85, 0x77, 0x95, 0xff, 0x5c, 0x9f, 0xbd, 0x96, 0xa5,
	0x96, 0x25, 0x07, 0x7e, 0x7e, 0xb7, 0x03, 0x37, 0x2c, 0x2c, 0xb9, 0x6b, 0x0b, 0x4b, 0x1f, 0xd8,
	0x88, 0xc6, 0xa8, 0x1d, 0x2d, 0x52, 0x5c, 0x51, 0xa9, 0x3b, 0xbf, 0xba, 0xdf, 0xd4, 0xe5, 0x9b,
	0xa3, 0x6b, 0x8b, 0xd6, 0x8f, 0xf0, 0xf0, 0x5c, 0x7e, 0xb9, 0x2b, 0x76, 0x35, 0xb2, 0xfb, 0x8b,
	0x95, 0x76, 0xaf, 0x7f, 0x69, 0xce, 0xce, 0xaf, 0x7f, 0xfd, 0x79, 0x8d, 0xc1, 0x72, 0x8d, 0x3d,
	0x02, 0xd5, 0x9b, 0xe0, 0xe6, 0x85, 0xb5, 0x5d, 0xe6, 0x92, 0xc0, 0x7e, 0xa3, 0x83, 0x1d, 0x4f,
	0x1c, 0xdf, 0xa7, 0xba, 0x2e, 0x73, 0x20, 0x56, 0x17, 0x39, 0x9f, 0x36, 0x64, 0xf1, 0x5a, 0x43,
	0x32, 0xc8, 0x4d, 0xa7, 0x9e, 0x4b, 0x6b, 0x88, 0xc6, 0xe9, 0x5c, 0x1d, 0x80, 0x66, 0xa1, 0x89,
	0x23, 0x2f, 0x4e, 0xb0, 0x1d, 0xe5, 0x15, 0xae, 0x93, 0xc8, 0xd7, 0xb4, 0xcc, 0x35, 0xe2, 0x34,
	0x9c, 0xc4, 0x61, 0x3b, 0xb0, 0x39, 0x8a, 0x9c, 0x89, 0x88, 0xed, 0x33, 0x11, 0xd9, 0xb1, 0x18,
	0x86, 0x69, 0x8d, 0xaa, 0x7c, 0x43, 0x0a, 0x3a, 0x22, 0xea, 0x12, 0xbb, 0x1a, 0x83, 0x3a, 0xf0,
	0x5c, 0x11, 0xa2, 0xcd, 0x73, 0x3c, 0xcc, 0x6c, 0xa2, 0xd7, 0x1a, 0x71, 0xc8, 0xe6, 0xf7, 0xa0,
	0x0e, 0x43, 0x57, 0x0c, 0xc9, 0xce, 0xfa, 0xde, 0x97, 0x37, 0x56, 0x03, 0x59, 0xab, 0xa3, 0x2a,
	0x97, 0x08, 0x5c, 0x4f, 0x65, 0x19, 0x65, 0xb7, 0x35, 0xaa, 0x8f, 0xea, 0x5f, 0x14, 0x50, 0x29,
	0x9a, 0x45, 0x0a, 0x95, 0xe5, 0x14, 0xbe, 0x81, 0xfc, 0x28, 0x8c, 0x26, 0x4e, 0x92, 0xde, 0xb6,
	0xb5, 0xf2, 0x36, 0xb2, 0xd0, 0x24, 0x3d, 0x9e, 0xea, 0xb3, 0x6f, 0x21, 0x17, 0x7b, 0x97, 0x22,
	0x9d, 0x58, 0x8f, 0x57, 0xe2, 0xf0, 0x7f, 0x81, 0x93, 0x5a, 0xf5, 0x7f, 0x19, 0x28, 0xcb, 0xc7,
	0x95, 0x8b, 0x78, 0xea, 0x27, 0xac, 0x03, 0xeb, 0xf8, 0xae, 0xd8, 0xee, 0xac, 0xa6, 0xd3, 0x59,
	0xf5, 0xf5, 0x6d, 0x4d, 0x73, 0xa5, 0x79, 0xf9, 0x1a, 0x1a, 0x58, 0xf4, 0x72, 0x1d, 0xca, 0x12,
	0x60, 0x0b, 0x7c, 0x96, 0xd3, 0xb5, 0x69, 0x75, 0x44, 0x4b, 0xef, 0x3c, 0x2f, 0x9d, 0x2f, 0x3d,
	0xfa, 0xbf, 0x85, 0x72, 0x44, 0x0e, 0xda, 0x32, 0x5b, 0xea, 0x2d, 0x03, 0x99, 0xd2, 0xc2, 0x4b,
	0x52, 0x5f, 0x66, 0xf9, 0x10, 0xa7, 0xe1, 0x02, 0x9e, 0x56, 0x66, 0xfe, 0x4e, 0x23, 0xfa, 0x92,
	0x11, 0x59, 0xbb, 0xf3, 0xef, 0x95, 0xb9, 0xa5, 0xe4, 0xb3, 0xd7, 0x4a, 0x7e, 0x56, 0xd1, 0x85,
	0x45, 0x45, 0xef, 0xfc, 0x55, 0x81, 0xca, 0x4d, 0xff, 0x3d, 0xb8, 0xd8, 0x19, 0x07, 0xa6, 0xdc,
	0x03, 0xcd, 0xe3, 0x76, 0xcf, 0x6a, 0xb7, 0x74, 0x05, 0xd7, 0xc6, 0x03, 0xb3, 0xd5, 0x30, 0xb9,
	0x9e, 0x41, 0x41, 0xd3, 0xa8, 0x9b, 0xb6, 0xd5, 0xd0, 0xb3, 0xb8, 0xfe, 0x1d, 0x9a, 0x46, 0xc3,
	0xee, 0xb4, 0xbb, 0xa6, 0x9e, 0x63, 0x9b, 0xb0, 0x46, 0xb2, 0xa6, 0x69, 0xf4, 0xfa, 0xdc, 0xec,
	0xea, 0x2a, 0x7b, 0x08, 0x1b, 0xc4, 0x6a, 0x98, 0xdd, 0x3a, 0xb7, 0x3a, 0xbd, 0x36, 0xd7, 0xf3,
	0x68, 0xc3, 0xea, 0xda, 0xc8, 0xd7, 0x0b, 0x3b, 0xaf, 0x61, 0xed, 0xca, 0x9c, 0x41, 0x69, 0xbf,
	0xf5, 0xb6, 0xd5, 0xfe, 0xa1, 0x25, 0xfd, 0x68, 0xb6, 0xf9, 0x0f, 0x06, 0x6f, 0xc8, 0x7d, 0x74,
	0xdf, 0xa8, 0xbf, 0x25, 0x2a, 0xb3, 0x13, 0x40, 0x71, 0x36, 0x71, 0x19, 0x83, 0xf5, 0x1e, 0x37,
	0xea, 0x6f, 0xad, 0xd6, 0x81, 0xdd, 0xed, 0x19, 0xbc, 0xa7, 0x3f, 0x60, 0x3a, 0x94, 0xe7, 0x3c,
	0xb3, 0x85, 0xf8, 0x75, 0x00, 0x83, 0x9b, 0x86, 0x6d, 0xb6, 0x7a, 0x14, 0xcb, 0x1a, 0x68, 0x92,
	0xfe, 0xd1, 0xea, 0xe9, 0x59, 0x14, 0xbf, 0x6f, 0xb7, 0xcc, 0x54, 0x4c, 0xcb, 0xad, 0xa4, 0x51,
	0xac, 0xee, 0x8c, 0x40, 0xff, 0xf4, 0xd9, 0xa5, 0x35, 0x17, 0xc3, 0x78, 0x80, 0xe0, 0x43, 0xa3,
	0xd5, 0xb0, 0x7b, 0x87, 0xfd, 0xe3, 0x7d, 0x5d, 0xa1, 0xd4, 0x20, 0xdd, 0xc1, 0x7d, 0x38, 0x33,
	0x17, 0x77, 0xac, 0x56, 0xfd, 0x30, 0xcd, 0x1c, 0xd2, 0x4d, 0xab, 0xdb, 0xd3, 0x73, 0x98, 0xe1,
	0x8e, 0xc9, 0xbb, 0xed, 0x96, 0xae, 0xee, 0xfc, 0x06, 0x3e, 0x5f, 0x3d, 0x5f, 0x68, 0x39, 0x37,
	0x9b, 0x46, 0xff, 0x08, 0xc3, 0xfb, 0x0c, 0x36, 0x9b, 0x16, 0xef, 0xf6, 0x6c, 0xe3, 0xa8, 0x67,
	0xf2, 0x96, 0xd1, 0xb3, 0x06, 0xa6, 0xae, 0xec, 0xfc, 0x11, 0xd6, 0xaf, 0x3e, 0x07, 0xec, 0x31,
	0x7c, 0xd6, 0x6f, 0x35, 0xcc, 0xa6, 0xd5, 0x32, 0x1b, 0xf6, 0xc0, 0x6a, 0x98, 0x6d, 0xbb, 0xde,
	0x6e, 0x98, 0x75, 0xfd, 0x01, 0xba, 0x7f, 0xb8, 0xf7, 0xab, 0x57, 0xba, 0x42, 0xff, 0x08, 0x9d,
	0x57, 0x03, 0x3d, 0x83, 0x27, 0x3e, 0xd8, 0x7b, 0x25, 0xb7, 0xfc, 0x41, 0xe7, 0x8d, 0x9e, 0x93,
	0x87, 0xef, 0x75, 0x75, 0xe7, 0x0f, 0x50, 0x5a, 0xea, 0x7e, 0xb6, 0x01, 0xa5, 0x7e, 0xab, 0xdb,
	0x31, 0xeb, 0x56, 0xd3, 0x32, 0x1b, 0x32, 0xe5, 0xcd, 0x36, 0x3f, 0x36, 0x7a, 0xf6, 0x9b, 0x3e,
	0x3f, 0xc0, 0x34, 0x2c, 0x73, 0xf6, 0x0f, 0xd2, 0xa4, 0xcf, 0x39, 0x7a, 0x76, 0xff, 0x08, 0x7e,
	0x1a, 0x06, 0x22, 0x6d, 0x06, 0x2f, 0x94, 0x4b, 0xc2, 0xa2, 0x23, 0xf6, 0xd3, 0x25, 0xac, 0x83,
	0xec, 0x8e, 0xf2, 0xbe, 0x28, 0x25, 0x83, 0x17, 0xff, 0xcc, 0xb0, 0x63, 0xc2, 0x6c, 0x7f, 0x9d,
	0xf6, 0x6f, 0x6d, 0xf0, 0xe2, 0x24, 0x4f, 0xf0, 0x97, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x68,
	0x6c, 0x01, 0xf5, 0x1c, 0x11, 0x00, 0x00,
}
